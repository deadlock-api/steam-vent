// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_clientlanp2p.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:CMsgClientLANP2PRequestChunks)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientLANP2PRequestChunks {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientLANP2PRequestChunks.chunk_keys)
    pub chunk_keys: ::std::vec::Vec<cmsg_client_lanp2prequest_chunks::ChunkKey>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientLANP2PRequestChunks.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientLANP2PRequestChunks {
    fn default() -> &'a CMsgClientLANP2PRequestChunks {
        <CMsgClientLANP2PRequestChunks as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientLANP2PRequestChunks {
    pub fn new() -> CMsgClientLANP2PRequestChunks {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientLANP2PRequestChunks {
    const NAME: &'static str = "CMsgClientLANP2PRequestChunks";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.chunk_keys.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.chunk_keys {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.chunk_keys {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientLANP2PRequestChunks {
        CMsgClientLANP2PRequestChunks::new()
    }

    fn clear(&mut self) {
        self.chunk_keys.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientLANP2PRequestChunks {
        static instance: CMsgClientLANP2PRequestChunks = CMsgClientLANP2PRequestChunks {
            chunk_keys: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientLANP2PRequestChunks`
pub mod cmsg_client_lanp2prequest_chunks {
    // @@protoc_insertion_point(message:CMsgClientLANP2PRequestChunks.ChunkKey)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ChunkKey {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientLANP2PRequestChunks.ChunkKey.depot_id)
        pub depot_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientLANP2PRequestChunks.ChunkKey.sha)
        pub sha: ::std::option::Option<::std::vec::Vec<u8>>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientLANP2PRequestChunks.ChunkKey.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ChunkKey {
        fn default() -> &'a ChunkKey {
            <ChunkKey as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl ChunkKey {
        pub fn new() -> ChunkKey {
            ::std::default::Default::default()
        }

        // optional uint32 depot_id = 1;

        pub fn depot_id(&self) -> u32 {
            self.depot_id.unwrap_or(0)
        }

        pub fn clear_depot_id(&mut self) {
            self.depot_id = ::std::option::Option::None;
        }

        pub fn has_depot_id(&self) -> bool {
            self.depot_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_depot_id(&mut self, v: u32) {
            self.depot_id = ::std::option::Option::Some(v);
        }

        // optional bytes sha = 2;

        pub fn sha(&self) -> &[u8] {
            match self.sha.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_sha(&mut self) {
            self.sha = ::std::option::Option::None;
        }

        pub fn has_sha(&self) -> bool {
            self.sha.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sha(&mut self, v: ::std::vec::Vec<u8>) {
            self.sha = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_sha(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.sha.is_none() {
                self.sha = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.sha.as_mut().unwrap()
        }

        // Take field
        pub fn take_sha(&mut self) -> ::std::vec::Vec<u8> {
            self.sha.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for ChunkKey {
        const NAME: &'static str = "ChunkKey";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.depot_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.sha = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.depot_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.sha.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(2, &v);
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.depot_id {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.sha.as_ref() {
                os.write_bytes(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ChunkKey {
            ChunkKey::new()
        }

        fn clear(&mut self) {
            self.depot_id = ::std::option::Option::None;
            self.sha = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ChunkKey {
            static instance: ChunkKey = ChunkKey {
                depot_id: ::std::option::Option::None,
                sha: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgClientLANP2PRequestChunksResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientLANP2PRequestChunksResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientLANP2PRequestChunksResponse.chunk_responses)
    pub chunk_responses: ::std::vec::Vec<cmsg_client_lanp2prequest_chunks_response::ChunkData>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientLANP2PRequestChunksResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientLANP2PRequestChunksResponse {
    fn default() -> &'a CMsgClientLANP2PRequestChunksResponse {
        <CMsgClientLANP2PRequestChunksResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientLANP2PRequestChunksResponse {
    pub fn new() -> CMsgClientLANP2PRequestChunksResponse {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientLANP2PRequestChunksResponse {
    const NAME: &'static str = "CMsgClientLANP2PRequestChunksResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.chunk_responses.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.chunk_responses {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.chunk_responses {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientLANP2PRequestChunksResponse {
        CMsgClientLANP2PRequestChunksResponse::new()
    }

    fn clear(&mut self) {
        self.chunk_responses.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientLANP2PRequestChunksResponse {
        static instance: CMsgClientLANP2PRequestChunksResponse = CMsgClientLANP2PRequestChunksResponse {
            chunk_responses: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

/// Nested message and enums of message `CMsgClientLANP2PRequestChunksResponse`
pub mod cmsg_client_lanp2prequest_chunks_response {
    // @@protoc_insertion_point(message:CMsgClientLANP2PRequestChunksResponse.ChunkData)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct ChunkData {
        // message fields
        // @@protoc_insertion_point(field:CMsgClientLANP2PRequestChunksResponse.ChunkData.result)
        pub result: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientLANP2PRequestChunksResponse.ChunkData.depot_id)
        pub depot_id: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
        pub sha: ::std::option::Option<::std::vec::Vec<u8>>,
        // @@protoc_insertion_point(field:CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
        pub chunk_data: ::std::option::Option<::std::vec::Vec<u8>>,
        // @@protoc_insertion_point(field:CMsgClientLANP2PRequestChunksResponse.ChunkData.encrypted)
        pub encrypted: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:CMsgClientLANP2PRequestChunksResponse.ChunkData.compressed)
        pub compressed: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:CMsgClientLANP2PRequestChunksResponse.ChunkData.special_fields)
        pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a ChunkData {
        fn default() -> &'a ChunkData {
            <ChunkData as ::steam_vent_proto_common::protobuf::Message>::default_instance()
        }
    }

    impl ChunkData {
        pub fn new() -> ChunkData {
            ::std::default::Default::default()
        }

        // optional uint32 result = 1;

        pub fn result(&self) -> u32 {
            self.result.unwrap_or(0)
        }

        pub fn clear_result(&mut self) {
            self.result = ::std::option::Option::None;
        }

        pub fn has_result(&self) -> bool {
            self.result.is_some()
        }

        // Param is passed by value, moved
        pub fn set_result(&mut self, v: u32) {
            self.result = ::std::option::Option::Some(v);
        }

        // optional uint32 depot_id = 2;

        pub fn depot_id(&self) -> u32 {
            self.depot_id.unwrap_or(0)
        }

        pub fn clear_depot_id(&mut self) {
            self.depot_id = ::std::option::Option::None;
        }

        pub fn has_depot_id(&self) -> bool {
            self.depot_id.is_some()
        }

        // Param is passed by value, moved
        pub fn set_depot_id(&mut self, v: u32) {
            self.depot_id = ::std::option::Option::Some(v);
        }

        // optional bytes sha = 3;

        pub fn sha(&self) -> &[u8] {
            match self.sha.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_sha(&mut self) {
            self.sha = ::std::option::Option::None;
        }

        pub fn has_sha(&self) -> bool {
            self.sha.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sha(&mut self, v: ::std::vec::Vec<u8>) {
            self.sha = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_sha(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.sha.is_none() {
                self.sha = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.sha.as_mut().unwrap()
        }

        // Take field
        pub fn take_sha(&mut self) -> ::std::vec::Vec<u8> {
            self.sha.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        // optional bytes chunk_data = 4;

        pub fn chunk_data(&self) -> &[u8] {
            match self.chunk_data.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_chunk_data(&mut self) {
            self.chunk_data = ::std::option::Option::None;
        }

        pub fn has_chunk_data(&self) -> bool {
            self.chunk_data.is_some()
        }

        // Param is passed by value, moved
        pub fn set_chunk_data(&mut self, v: ::std::vec::Vec<u8>) {
            self.chunk_data = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_chunk_data(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.chunk_data.is_none() {
                self.chunk_data = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.chunk_data.as_mut().unwrap()
        }

        // Take field
        pub fn take_chunk_data(&mut self) -> ::std::vec::Vec<u8> {
            self.chunk_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        // optional bool encrypted = 5;

        pub fn encrypted(&self) -> bool {
            self.encrypted.unwrap_or(false)
        }

        pub fn clear_encrypted(&mut self) {
            self.encrypted = ::std::option::Option::None;
        }

        pub fn has_encrypted(&self) -> bool {
            self.encrypted.is_some()
        }

        // Param is passed by value, moved
        pub fn set_encrypted(&mut self, v: bool) {
            self.encrypted = ::std::option::Option::Some(v);
        }

        // optional bool compressed = 6;

        pub fn compressed(&self) -> bool {
            self.compressed.unwrap_or(false)
        }

        pub fn clear_compressed(&mut self) {
            self.compressed = ::std::option::Option::None;
        }

        pub fn has_compressed(&self) -> bool {
            self.compressed.is_some()
        }

        // Param is passed by value, moved
        pub fn set_compressed(&mut self, v: bool) {
            self.compressed = ::std::option::Option::Some(v);
        }
    }

    impl ::steam_vent_proto_common::protobuf::Message for ChunkData {
        const NAME: &'static str = "ChunkData";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.result = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.depot_id = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    26 => {
                        self.sha = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    34 => {
                        self.chunk_data = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    40 => {
                        self.encrypted = ::std::option::Option::Some(is.read_bool()?);
                    },
                    48 => {
                        self.compressed = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.result {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.depot_id {
                my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.sha.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(3, &v);
            }
            if let Some(v) = self.chunk_data.as_ref() {
                my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(4, &v);
            }
            if let Some(v) = self.encrypted {
                my_size += 1 + 1;
            }
            if let Some(v) = self.compressed {
                my_size += 1 + 1;
            }
            my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
            if let Some(v) = self.result {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.depot_id {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.sha.as_ref() {
                os.write_bytes(3, v)?;
            }
            if let Some(v) = self.chunk_data.as_ref() {
                os.write_bytes(4, v)?;
            }
            if let Some(v) = self.encrypted {
                os.write_bool(5, v)?;
            }
            if let Some(v) = self.compressed {
                os.write_bool(6, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> ChunkData {
            ChunkData::new()
        }

        fn clear(&mut self) {
            self.result = ::std::option::Option::None;
            self.depot_id = ::std::option::Option::None;
            self.sha = ::std::option::Option::None;
            self.chunk_data = ::std::option::Option::None;
            self.encrypted = ::std::option::Option::None;
            self.compressed = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static ChunkData {
            static instance: ChunkData = ChunkData {
                result: ::std::option::Option::None,
                depot_id: ::std::option::Option::None,
                sha: ::std::option::Option::None,
                chunk_data: ::std::option::Option::None,
                encrypted: ::std::option::Option::None,
                compressed: ::std::option::Option::None,
                special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }
}

// @@protoc_insertion_point(message:CMsgClientPeerChunkRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientPeerChunkRequest {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientPeerChunkRequest.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientPeerChunkRequest.depot_id)
    pub depot_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientPeerChunkRequest.sha)
    pub sha: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CMsgClientPeerChunkRequest.access_token)
    pub access_token: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientPeerChunkRequest.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientPeerChunkRequest {
    fn default() -> &'a CMsgClientPeerChunkRequest {
        <CMsgClientPeerChunkRequest as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientPeerChunkRequest {
    pub fn new() -> CMsgClientPeerChunkRequest {
        ::std::default::Default::default()
    }

    // optional uint32 app_id = 1;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 depot_id = 2;

    pub fn depot_id(&self) -> u32 {
        self.depot_id.unwrap_or(0)
    }

    pub fn clear_depot_id(&mut self) {
        self.depot_id = ::std::option::Option::None;
    }

    pub fn has_depot_id(&self) -> bool {
        self.depot_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depot_id(&mut self, v: u32) {
        self.depot_id = ::std::option::Option::Some(v);
    }

    // optional bytes sha = 3;

    pub fn sha(&self) -> &[u8] {
        match self.sha.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_sha(&mut self) {
        self.sha = ::std::option::Option::None;
    }

    pub fn has_sha(&self) -> bool {
        self.sha.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sha(&mut self, v: ::std::vec::Vec<u8>) {
        self.sha = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sha(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.sha.is_none() {
            self.sha = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.sha.as_mut().unwrap()
    }

    // Take field
    pub fn take_sha(&mut self) -> ::std::vec::Vec<u8> {
        self.sha.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint64 access_token = 4;

    pub fn access_token(&self) -> u64 {
        self.access_token.unwrap_or(0)
    }

    pub fn clear_access_token(&mut self) {
        self.access_token = ::std::option::Option::None;
    }

    pub fn has_access_token(&self) -> bool {
        self.access_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_access_token(&mut self, v: u64) {
        self.access_token = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientPeerChunkRequest {
    const NAME: &'static str = "CMsgClientPeerChunkRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.depot_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.sha = ::std::option::Option::Some(is.read_bytes()?);
                },
                32 => {
                    self.access_token = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.app_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.depot_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.sha.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(v) = self.access_token {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(4, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.app_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.depot_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.sha.as_ref() {
            os.write_bytes(3, v)?;
        }
        if let Some(v) = self.access_token {
            os.write_uint64(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientPeerChunkRequest {
        CMsgClientPeerChunkRequest::new()
    }

    fn clear(&mut self) {
        self.app_id = ::std::option::Option::None;
        self.depot_id = ::std::option::Option::None;
        self.sha = ::std::option::Option::None;
        self.access_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientPeerChunkRequest {
        static instance: CMsgClientPeerChunkRequest = CMsgClientPeerChunkRequest {
            app_id: ::std::option::Option::None,
            depot_id: ::std::option::Option::None,
            sha: ::std::option::Option::None,
            access_token: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgClientPeerChunkResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgClientPeerChunkResponse {
    // message fields
    // @@protoc_insertion_point(field:CMsgClientPeerChunkResponse.result)
    pub result: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientPeerChunkResponse.app_id)
    pub app_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientPeerChunkResponse.depot_id)
    pub depot_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgClientPeerChunkResponse.sha)
    pub sha: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:CMsgClientPeerChunkResponse.encrypted)
    pub encrypted: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientPeerChunkResponse.compressed)
    pub compressed: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgClientPeerChunkResponse.chunk_data)
    pub chunk_data: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgClientPeerChunkResponse.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgClientPeerChunkResponse {
    fn default() -> &'a CMsgClientPeerChunkResponse {
        <CMsgClientPeerChunkResponse as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgClientPeerChunkResponse {
    pub fn new() -> CMsgClientPeerChunkResponse {
        ::std::default::Default::default()
    }

    // optional uint32 result = 1;

    pub fn result(&self) -> u32 {
        self.result.unwrap_or(0)
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: u32) {
        self.result = ::std::option::Option::Some(v);
    }

    // optional uint32 app_id = 2;

    pub fn app_id(&self) -> u32 {
        self.app_id.unwrap_or(0)
    }

    pub fn clear_app_id(&mut self) {
        self.app_id = ::std::option::Option::None;
    }

    pub fn has_app_id(&self) -> bool {
        self.app_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_app_id(&mut self, v: u32) {
        self.app_id = ::std::option::Option::Some(v);
    }

    // optional uint32 depot_id = 3;

    pub fn depot_id(&self) -> u32 {
        self.depot_id.unwrap_or(0)
    }

    pub fn clear_depot_id(&mut self) {
        self.depot_id = ::std::option::Option::None;
    }

    pub fn has_depot_id(&self) -> bool {
        self.depot_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_depot_id(&mut self, v: u32) {
        self.depot_id = ::std::option::Option::Some(v);
    }

    // optional bytes sha = 4;

    pub fn sha(&self) -> &[u8] {
        match self.sha.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_sha(&mut self) {
        self.sha = ::std::option::Option::None;
    }

    pub fn has_sha(&self) -> bool {
        self.sha.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sha(&mut self, v: ::std::vec::Vec<u8>) {
        self.sha = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sha(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.sha.is_none() {
            self.sha = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.sha.as_mut().unwrap()
    }

    // Take field
    pub fn take_sha(&mut self) -> ::std::vec::Vec<u8> {
        self.sha.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bool encrypted = 5;

    pub fn encrypted(&self) -> bool {
        self.encrypted.unwrap_or(false)
    }

    pub fn clear_encrypted(&mut self) {
        self.encrypted = ::std::option::Option::None;
    }

    pub fn has_encrypted(&self) -> bool {
        self.encrypted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encrypted(&mut self, v: bool) {
        self.encrypted = ::std::option::Option::Some(v);
    }

    // optional bool compressed = 6;

    pub fn compressed(&self) -> bool {
        self.compressed.unwrap_or(false)
    }

    pub fn clear_compressed(&mut self) {
        self.compressed = ::std::option::Option::None;
    }

    pub fn has_compressed(&self) -> bool {
        self.compressed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_compressed(&mut self, v: bool) {
        self.compressed = ::std::option::Option::Some(v);
    }

    // optional bytes chunk_data = 7;

    pub fn chunk_data(&self) -> &[u8] {
        match self.chunk_data.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_chunk_data(&mut self) {
        self.chunk_data = ::std::option::Option::None;
    }

    pub fn has_chunk_data(&self) -> bool {
        self.chunk_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chunk_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.chunk_data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chunk_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.chunk_data.is_none() {
            self.chunk_data = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.chunk_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_chunk_data(&mut self) -> ::std::vec::Vec<u8> {
        self.chunk_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgClientPeerChunkResponse {
    const NAME: &'static str = "CMsgClientPeerChunkResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.app_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.depot_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.sha = ::std::option::Option::Some(is.read_bytes()?);
                },
                40 => {
                    self.encrypted = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.compressed = ::std::option::Option::Some(is.read_bool()?);
                },
                58 => {
                    self.chunk_data = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.app_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.depot_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.sha.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(v) = self.encrypted {
            my_size += 1 + 1;
        }
        if let Some(v) = self.compressed {
            my_size += 1 + 1;
        }
        if let Some(v) = self.chunk_data.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(7, &v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.app_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.depot_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.sha.as_ref() {
            os.write_bytes(4, v)?;
        }
        if let Some(v) = self.encrypted {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.compressed {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.chunk_data.as_ref() {
            os.write_bytes(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgClientPeerChunkResponse {
        CMsgClientPeerChunkResponse::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.app_id = ::std::option::Option::None;
        self.depot_id = ::std::option::Option::None;
        self.sha = ::std::option::Option::None;
        self.encrypted = ::std::option::Option::None;
        self.compressed = ::std::option::Option::None;
        self.chunk_data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgClientPeerChunkResponse {
        static instance: CMsgClientPeerChunkResponse = CMsgClientPeerChunkResponse {
            result: ::std::option::Option::None,
            app_id: ::std::option::Option::None,
            depot_id: ::std::option::Option::None,
            sha: ::std::option::Option::None,
            encrypted: ::std::option::Option::None,
            compressed: ::std::option::Option::None,
            chunk_data: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}


const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::steammessages_base::*;
impl ::steam_vent_proto_common::RpcMessage for CMsgClientLANP2PRequestChunks {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientLANP2PRequestChunksResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientPeerChunkRequest {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgClientPeerChunkRequest {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgClientPeerChunkRequest;
}
impl ::steam_vent_proto_common::RpcMessage for CMsgClientPeerChunkResponse {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessageWithKind for CMsgClientPeerChunkResponse {
    type KindEnum = crate::enums_clientserver::EMsg;
    const KIND: Self::KindEnum = crate::enums_clientserver::EMsg::k_EMsgClientPeerChunkResponse;
}
