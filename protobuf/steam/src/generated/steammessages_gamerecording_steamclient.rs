// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_gamerecording.steamclient.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:CVideoManagerClipID)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVideoManagerClipID {
    // message fields
    // @@protoc_insertion_point(field:CVideoManagerClipID.video_manager_clip_id)
    pub video_manager_clip_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CVideoManagerClipID.video_manager_video_id)
    pub video_manager_video_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CVideoManagerClipID.server_timeline_id)
    pub server_timeline_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CVideoManagerClipID.manifest_url)
    pub manifest_url: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CVideoManagerClipID.duration_ms)
    pub duration_ms: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CVideoManagerClipID.start_offset_ms)
    pub start_offset_ms: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CVideoManagerClipID.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVideoManagerClipID {
    fn default() -> &'a CVideoManagerClipID {
        <CVideoManagerClipID as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CVideoManagerClipID {
    pub fn new() -> CVideoManagerClipID {
        ::std::default::Default::default()
    }

    // optional fixed64 video_manager_clip_id = 1;

    pub fn video_manager_clip_id(&self) -> u64 {
        self.video_manager_clip_id.unwrap_or(0)
    }

    pub fn clear_video_manager_clip_id(&mut self) {
        self.video_manager_clip_id = ::std::option::Option::None;
    }

    pub fn has_video_manager_clip_id(&self) -> bool {
        self.video_manager_clip_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_video_manager_clip_id(&mut self, v: u64) {
        self.video_manager_clip_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 video_manager_video_id = 2;

    pub fn video_manager_video_id(&self) -> u64 {
        self.video_manager_video_id.unwrap_or(0)
    }

    pub fn clear_video_manager_video_id(&mut self) {
        self.video_manager_video_id = ::std::option::Option::None;
    }

    pub fn has_video_manager_video_id(&self) -> bool {
        self.video_manager_video_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_video_manager_video_id(&mut self, v: u64) {
        self.video_manager_video_id = ::std::option::Option::Some(v);
    }

    // optional fixed64 server_timeline_id = 3;

    pub fn server_timeline_id(&self) -> u64 {
        self.server_timeline_id.unwrap_or(0)
    }

    pub fn clear_server_timeline_id(&mut self) {
        self.server_timeline_id = ::std::option::Option::None;
    }

    pub fn has_server_timeline_id(&self) -> bool {
        self.server_timeline_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_timeline_id(&mut self, v: u64) {
        self.server_timeline_id = ::std::option::Option::Some(v);
    }

    // optional string manifest_url = 4;

    pub fn manifest_url(&self) -> &str {
        match self.manifest_url.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_manifest_url(&mut self) {
        self.manifest_url = ::std::option::Option::None;
    }

    pub fn has_manifest_url(&self) -> bool {
        self.manifest_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_manifest_url(&mut self, v: ::std::string::String) {
        self.manifest_url = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manifest_url(&mut self) -> &mut ::std::string::String {
        if self.manifest_url.is_none() {
            self.manifest_url = ::std::option::Option::Some(::std::string::String::new());
        }
        self.manifest_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_manifest_url(&mut self) -> ::std::string::String {
        self.manifest_url.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 duration_ms = 5;

    pub fn duration_ms(&self) -> u32 {
        self.duration_ms.unwrap_or(0)
    }

    pub fn clear_duration_ms(&mut self) {
        self.duration_ms = ::std::option::Option::None;
    }

    pub fn has_duration_ms(&self) -> bool {
        self.duration_ms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_duration_ms(&mut self, v: u32) {
        self.duration_ms = ::std::option::Option::Some(v);
    }

    // optional uint32 start_offset_ms = 6;

    pub fn start_offset_ms(&self) -> u32 {
        self.start_offset_ms.unwrap_or(0)
    }

    pub fn clear_start_offset_ms(&mut self) {
        self.start_offset_ms = ::std::option::Option::None;
    }

    pub fn has_start_offset_ms(&self) -> bool {
        self.start_offset_ms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_offset_ms(&mut self, v: u32) {
        self.start_offset_ms = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CVideoManagerClipID {
    const NAME: &'static str = "CVideoManagerClipID";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.video_manager_clip_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.video_manager_video_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                25 => {
                    self.server_timeline_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                34 => {
                    self.manifest_url = ::std::option::Option::Some(is.read_string()?);
                },
                40 => {
                    self.duration_ms = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.start_offset_ms = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.video_manager_clip_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.video_manager_video_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.server_timeline_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.manifest_url.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.duration_ms {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.start_offset_ms {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.video_manager_clip_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.video_manager_video_id {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.server_timeline_id {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.manifest_url.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.duration_ms {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.start_offset_ms {
            os.write_uint32(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVideoManagerClipID {
        CVideoManagerClipID::new()
    }

    fn clear(&mut self) {
        self.video_manager_clip_id = ::std::option::Option::None;
        self.video_manager_video_id = ::std::option::Option::None;
        self.server_timeline_id = ::std::option::Option::None;
        self.manifest_url = ::std::option::Option::None;
        self.duration_ms = ::std::option::Option::None;
        self.start_offset_ms = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVideoManagerClipID {
        static instance: CVideoManagerClipID = CVideoManagerClipID {
            video_manager_clip_id: ::std::option::Option::None,
            video_manager_video_id: ::std::option::Option::None,
            server_timeline_id: ::std::option::Option::None,
            manifest_url: ::std::option::Option::None,
            duration_ms: ::std::option::Option::None,
            start_offset_ms: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGameRecordingClip)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameRecordingClip {
    // message fields
    // @@protoc_insertion_point(field:CGameRecordingClip.clip_id)
    pub clip_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameRecordingClip.gameid)
    pub gameid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameRecordingClip.date_recorded)
    pub date_recorded: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CGameRecordingClip.total_file_size_bytes)
    pub total_file_size_bytes: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameRecordingClip.video_ids)
    pub video_ids: ::std::vec::Vec<CVideoManagerClipID>,
    // @@protoc_insertion_point(field:CGameRecordingClip.owner_steamid)
    pub owner_steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CGameRecordingClip.upload_complete)
    pub upload_complete: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CGameRecordingClip.duration_ms)
    pub duration_ms: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameRecordingClip.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameRecordingClip {
    fn default() -> &'a CGameRecordingClip {
        <CGameRecordingClip as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGameRecordingClip {
    pub fn new() -> CGameRecordingClip {
        ::std::default::Default::default()
    }

    // optional fixed64 clip_id = 1;

    pub fn clip_id(&self) -> u64 {
        self.clip_id.unwrap_or(0)
    }

    pub fn clear_clip_id(&mut self) {
        self.clip_id = ::std::option::Option::None;
    }

    pub fn has_clip_id(&self) -> bool {
        self.clip_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clip_id(&mut self, v: u64) {
        self.clip_id = ::std::option::Option::Some(v);
    }

    // optional uint64 gameid = 2;

    pub fn gameid(&self) -> u64 {
        self.gameid.unwrap_or(0)
    }

    pub fn clear_gameid(&mut self) {
        self.gameid = ::std::option::Option::None;
    }

    pub fn has_gameid(&self) -> bool {
        self.gameid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gameid(&mut self, v: u64) {
        self.gameid = ::std::option::Option::Some(v);
    }

    // optional uint32 date_recorded = 4;

    pub fn date_recorded(&self) -> u32 {
        self.date_recorded.unwrap_or(0)
    }

    pub fn clear_date_recorded(&mut self) {
        self.date_recorded = ::std::option::Option::None;
    }

    pub fn has_date_recorded(&self) -> bool {
        self.date_recorded.is_some()
    }

    // Param is passed by value, moved
    pub fn set_date_recorded(&mut self, v: u32) {
        self.date_recorded = ::std::option::Option::Some(v);
    }

    // optional uint64 total_file_size_bytes = 7;

    pub fn total_file_size_bytes(&self) -> u64 {
        self.total_file_size_bytes.unwrap_or(0)
    }

    pub fn clear_total_file_size_bytes(&mut self) {
        self.total_file_size_bytes = ::std::option::Option::None;
    }

    pub fn has_total_file_size_bytes(&self) -> bool {
        self.total_file_size_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_total_file_size_bytes(&mut self, v: u64) {
        self.total_file_size_bytes = ::std::option::Option::Some(v);
    }

    // optional fixed64 owner_steamid = 10;

    pub fn owner_steamid(&self) -> u64 {
        self.owner_steamid.unwrap_or(0)
    }

    pub fn clear_owner_steamid(&mut self) {
        self.owner_steamid = ::std::option::Option::None;
    }

    pub fn has_owner_steamid(&self) -> bool {
        self.owner_steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_owner_steamid(&mut self, v: u64) {
        self.owner_steamid = ::std::option::Option::Some(v);
    }

    // optional bool upload_complete = 11;

    pub fn upload_complete(&self) -> bool {
        self.upload_complete.unwrap_or(false)
    }

    pub fn clear_upload_complete(&mut self) {
        self.upload_complete = ::std::option::Option::None;
    }

    pub fn has_upload_complete(&self) -> bool {
        self.upload_complete.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_complete(&mut self, v: bool) {
        self.upload_complete = ::std::option::Option::Some(v);
    }

    // optional uint32 duration_ms = 12;

    pub fn duration_ms(&self) -> u32 {
        self.duration_ms.unwrap_or(0)
    }

    pub fn clear_duration_ms(&mut self) {
        self.duration_ms = ::std::option::Option::None;
    }

    pub fn has_duration_ms(&self) -> bool {
        self.duration_ms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_duration_ms(&mut self, v: u32) {
        self.duration_ms = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGameRecordingClip {
    const NAME: &'static str = "CGameRecordingClip";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.clip_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.gameid = ::std::option::Option::Some(is.read_uint64()?);
                },
                32 => {
                    self.date_recorded = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.total_file_size_bytes = ::std::option::Option::Some(is.read_uint64()?);
                },
                74 => {
                    self.video_ids.push(is.read_message()?);
                },
                81 => {
                    self.owner_steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                88 => {
                    self.upload_complete = ::std::option::Option::Some(is.read_bool()?);
                },
                96 => {
                    self.duration_ms = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.clip_id {
            my_size += 1 + 8;
        }
        if let Some(v) = self.gameid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(2, v);
        }
        if let Some(v) = self.date_recorded {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.total_file_size_bytes {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(7, v);
        }
        for value in &self.video_ids {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.owner_steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.upload_complete {
            my_size += 1 + 1;
        }
        if let Some(v) = self.duration_ms {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(12, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.clip_id {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.gameid {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.date_recorded {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.total_file_size_bytes {
            os.write_uint64(7, v)?;
        }
        for v in &self.video_ids {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        };
        if let Some(v) = self.owner_steamid {
            os.write_fixed64(10, v)?;
        }
        if let Some(v) = self.upload_complete {
            os.write_bool(11, v)?;
        }
        if let Some(v) = self.duration_ms {
            os.write_uint32(12, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameRecordingClip {
        CGameRecordingClip::new()
    }

    fn clear(&mut self) {
        self.clip_id = ::std::option::Option::None;
        self.gameid = ::std::option::Option::None;
        self.date_recorded = ::std::option::Option::None;
        self.total_file_size_bytes = ::std::option::Option::None;
        self.video_ids.clear();
        self.owner_steamid = ::std::option::Option::None;
        self.upload_complete = ::std::option::Option::None;
        self.duration_ms = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameRecordingClip {
        static instance: CGameRecordingClip = CGameRecordingClip {
            clip_id: ::std::option::Option::None,
            gameid: ::std::option::Option::None,
            date_recorded: ::std::option::Option::None,
            total_file_size_bytes: ::std::option::Option::None,
            video_ids: ::std::vec::Vec::new(),
            owner_steamid: ::std::option::Option::None,
            upload_complete: ::std::option::Option::None,
            duration_ms: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGameRecording_CreateShareClip_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameRecording_CreateShareClip_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameRecording_CreateShareClip_Request.clip)
    pub clip: ::steam_vent_proto_common::protobuf::MessageField<CGameRecordingClip>,
    // @@protoc_insertion_point(field:CGameRecording_CreateShareClip_Request.video_def)
    pub video_def: ::std::vec::Vec<super::steammessages_clientserver_video::CMsgVideoGameRecordingDef>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameRecording_CreateShareClip_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameRecording_CreateShareClip_Request {
    fn default() -> &'a CGameRecording_CreateShareClip_Request {
        <CGameRecording_CreateShareClip_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGameRecording_CreateShareClip_Request {
    pub fn new() -> CGameRecording_CreateShareClip_Request {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGameRecording_CreateShareClip_Request {
    const NAME: &'static str = "CGameRecording_CreateShareClip_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                18 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.clip)?;
                },
                26 => {
                    self.video_def.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.clip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.video_def {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.clip.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.video_def {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameRecording_CreateShareClip_Request {
        CGameRecording_CreateShareClip_Request::new()
    }

    fn clear(&mut self) {
        self.clip.clear();
        self.video_def.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameRecording_CreateShareClip_Request {
        static instance: CGameRecording_CreateShareClip_Request = CGameRecording_CreateShareClip_Request {
            clip: ::steam_vent_proto_common::protobuf::MessageField::none(),
            video_def: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGameRecording_CreateShareClip_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameRecording_CreateShareClip_Response {
    // message fields
    // @@protoc_insertion_point(field:CGameRecording_CreateShareClip_Response.clip)
    pub clip: ::steam_vent_proto_common::protobuf::MessageField<CGameRecordingClip>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameRecording_CreateShareClip_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameRecording_CreateShareClip_Response {
    fn default() -> &'a CGameRecording_CreateShareClip_Response {
        <CGameRecording_CreateShareClip_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGameRecording_CreateShareClip_Response {
    pub fn new() -> CGameRecording_CreateShareClip_Response {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGameRecording_CreateShareClip_Response {
    const NAME: &'static str = "CGameRecording_CreateShareClip_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.clip)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.clip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.clip.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameRecording_CreateShareClip_Response {
        CGameRecording_CreateShareClip_Response::new()
    }

    fn clear(&mut self) {
        self.clip.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameRecording_CreateShareClip_Response {
        static instance: CGameRecording_CreateShareClip_Response = CGameRecording_CreateShareClip_Response {
            clip: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGameRecording_DeleteSharedClip_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameRecording_DeleteSharedClip_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameRecording_DeleteSharedClip_Request.clip_id)
    pub clip_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameRecording_DeleteSharedClip_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameRecording_DeleteSharedClip_Request {
    fn default() -> &'a CGameRecording_DeleteSharedClip_Request {
        <CGameRecording_DeleteSharedClip_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGameRecording_DeleteSharedClip_Request {
    pub fn new() -> CGameRecording_DeleteSharedClip_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 clip_id = 2;

    pub fn clip_id(&self) -> u64 {
        self.clip_id.unwrap_or(0)
    }

    pub fn clear_clip_id(&mut self) {
        self.clip_id = ::std::option::Option::None;
    }

    pub fn has_clip_id(&self) -> bool {
        self.clip_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clip_id(&mut self, v: u64) {
        self.clip_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGameRecording_DeleteSharedClip_Request {
    const NAME: &'static str = "CGameRecording_DeleteSharedClip_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                17 => {
                    self.clip_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.clip_id {
            my_size += 1 + 8;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.clip_id {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameRecording_DeleteSharedClip_Request {
        CGameRecording_DeleteSharedClip_Request::new()
    }

    fn clear(&mut self) {
        self.clip_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameRecording_DeleteSharedClip_Request {
        static instance: CGameRecording_DeleteSharedClip_Request = CGameRecording_DeleteSharedClip_Request {
            clip_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGameRecording_DeleteSharedClip_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameRecording_DeleteSharedClip_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CGameRecording_DeleteSharedClip_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameRecording_DeleteSharedClip_Response {
    fn default() -> &'a CGameRecording_DeleteSharedClip_Response {
        <CGameRecording_DeleteSharedClip_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGameRecording_DeleteSharedClip_Response {
    pub fn new() -> CGameRecording_DeleteSharedClip_Response {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGameRecording_DeleteSharedClip_Response {
    const NAME: &'static str = "CGameRecording_DeleteSharedClip_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameRecording_DeleteSharedClip_Response {
        CGameRecording_DeleteSharedClip_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameRecording_DeleteSharedClip_Response {
        static instance: CGameRecording_DeleteSharedClip_Response = CGameRecording_DeleteSharedClip_Response {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGameRecording_GetSingleSharedClip_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameRecording_GetSingleSharedClip_Request {
    // message fields
    // @@protoc_insertion_point(field:CGameRecording_GetSingleSharedClip_Request.clip_id)
    pub clip_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameRecording_GetSingleSharedClip_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameRecording_GetSingleSharedClip_Request {
    fn default() -> &'a CGameRecording_GetSingleSharedClip_Request {
        <CGameRecording_GetSingleSharedClip_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGameRecording_GetSingleSharedClip_Request {
    pub fn new() -> CGameRecording_GetSingleSharedClip_Request {
        ::std::default::Default::default()
    }

    // optional fixed64 clip_id = 2;

    pub fn clip_id(&self) -> u64 {
        self.clip_id.unwrap_or(0)
    }

    pub fn clear_clip_id(&mut self) {
        self.clip_id = ::std::option::Option::None;
    }

    pub fn has_clip_id(&self) -> bool {
        self.clip_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_clip_id(&mut self, v: u64) {
        self.clip_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGameRecording_GetSingleSharedClip_Request {
    const NAME: &'static str = "CGameRecording_GetSingleSharedClip_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                17 => {
                    self.clip_id = ::std::option::Option::Some(is.read_fixed64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.clip_id {
            my_size += 1 + 8;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.clip_id {
            os.write_fixed64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameRecording_GetSingleSharedClip_Request {
        CGameRecording_GetSingleSharedClip_Request::new()
    }

    fn clear(&mut self) {
        self.clip_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameRecording_GetSingleSharedClip_Request {
        static instance: CGameRecording_GetSingleSharedClip_Request = CGameRecording_GetSingleSharedClip_Request {
            clip_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGameRecording_GetSingleSharedClip_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGameRecording_GetSingleSharedClip_Response {
    // message fields
    // @@protoc_insertion_point(field:CGameRecording_GetSingleSharedClip_Response.clip)
    pub clip: ::steam_vent_proto_common::protobuf::MessageField<CGameRecordingClip>,
    // special fields
    // @@protoc_insertion_point(special_field:CGameRecording_GetSingleSharedClip_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGameRecording_GetSingleSharedClip_Response {
    fn default() -> &'a CGameRecording_GetSingleSharedClip_Response {
        <CGameRecording_GetSingleSharedClip_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGameRecording_GetSingleSharedClip_Response {
    pub fn new() -> CGameRecording_GetSingleSharedClip_Response {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGameRecording_GetSingleSharedClip_Response {
    const NAME: &'static str = "CGameRecording_GetSingleSharedClip_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.clip)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.clip.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.clip.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGameRecording_GetSingleSharedClip_Response {
        CGameRecording_GetSingleSharedClip_Response::new()
    }

    fn clear(&mut self) {
        self.clip.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGameRecording_GetSingleSharedClip_Response {
        static instance: CGameRecording_GetSingleSharedClip_Response = CGameRecording_GetSingleSharedClip_Response {
            clip: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CVideo_BeginGameRecordingSegmentsUpload_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVideo_BeginGameRecordingSegmentsUpload_Request {
    // message fields
    // @@protoc_insertion_point(field:CVideo_BeginGameRecordingSegmentsUpload_Request.recording_id)
    pub recording_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CVideo_BeginGameRecordingSegmentsUpload_Request.component_name)
    pub component_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CVideo_BeginGameRecordingSegmentsUpload_Request.representation_name)
    pub representation_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CVideo_BeginGameRecordingSegmentsUpload_Request.segments_to_store)
    pub segments_to_store: ::std::vec::Vec<super::steammessages_clientserver_video::CVideo_GameRecordingSegmentInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:CVideo_BeginGameRecordingSegmentsUpload_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVideo_BeginGameRecordingSegmentsUpload_Request {
    fn default() -> &'a CVideo_BeginGameRecordingSegmentsUpload_Request {
        <CVideo_BeginGameRecordingSegmentsUpload_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CVideo_BeginGameRecordingSegmentsUpload_Request {
    pub fn new() -> CVideo_BeginGameRecordingSegmentsUpload_Request {
        ::std::default::Default::default()
    }

    // optional uint64 recording_id = 1;

    pub fn recording_id(&self) -> u64 {
        self.recording_id.unwrap_or(0)
    }

    pub fn clear_recording_id(&mut self) {
        self.recording_id = ::std::option::Option::None;
    }

    pub fn has_recording_id(&self) -> bool {
        self.recording_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recording_id(&mut self, v: u64) {
        self.recording_id = ::std::option::Option::Some(v);
    }

    // optional string component_name = 2;

    pub fn component_name(&self) -> &str {
        match self.component_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_component_name(&mut self) {
        self.component_name = ::std::option::Option::None;
    }

    pub fn has_component_name(&self) -> bool {
        self.component_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_component_name(&mut self, v: ::std::string::String) {
        self.component_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_component_name(&mut self) -> &mut ::std::string::String {
        if self.component_name.is_none() {
            self.component_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.component_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_component_name(&mut self) -> ::std::string::String {
        self.component_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string representation_name = 3;

    pub fn representation_name(&self) -> &str {
        match self.representation_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_representation_name(&mut self) {
        self.representation_name = ::std::option::Option::None;
    }

    pub fn has_representation_name(&self) -> bool {
        self.representation_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_representation_name(&mut self, v: ::std::string::String) {
        self.representation_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_representation_name(&mut self) -> &mut ::std::string::String {
        if self.representation_name.is_none() {
            self.representation_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.representation_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_representation_name(&mut self) -> ::std::string::String {
        self.representation_name.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CVideo_BeginGameRecordingSegmentsUpload_Request {
    const NAME: &'static str = "CVideo_BeginGameRecordingSegmentsUpload_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.recording_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.component_name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.representation_name = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.segments_to_store.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.recording_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.component_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.representation_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        for value in &self.segments_to_store {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.recording_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.component_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.representation_name.as_ref() {
            os.write_string(3, v)?;
        }
        for v in &self.segments_to_store {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVideo_BeginGameRecordingSegmentsUpload_Request {
        CVideo_BeginGameRecordingSegmentsUpload_Request::new()
    }

    fn clear(&mut self) {
        self.recording_id = ::std::option::Option::None;
        self.component_name = ::std::option::Option::None;
        self.representation_name = ::std::option::Option::None;
        self.segments_to_store.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVideo_BeginGameRecordingSegmentsUpload_Request {
        static instance: CVideo_BeginGameRecordingSegmentsUpload_Request = CVideo_BeginGameRecordingSegmentsUpload_Request {
            recording_id: ::std::option::Option::None,
            component_name: ::std::option::Option::None,
            representation_name: ::std::option::Option::None,
            segments_to_store: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CVideo_BeginGameRecordingSegmentsUpload_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVideo_BeginGameRecordingSegmentsUpload_Response {
    // message fields
    // @@protoc_insertion_point(field:CVideo_BeginGameRecordingSegmentsUpload_Response.segments_needed)
    pub segments_needed: ::std::vec::Vec<super::steammessages_clientserver_video::CVideo_GameRecordingSegmentUploadInfo>,
    // @@protoc_insertion_point(field:CVideo_BeginGameRecordingSegmentsUpload_Response.call_again)
    pub call_again: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CVideo_BeginGameRecordingSegmentsUpload_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVideo_BeginGameRecordingSegmentsUpload_Response {
    fn default() -> &'a CVideo_BeginGameRecordingSegmentsUpload_Response {
        <CVideo_BeginGameRecordingSegmentsUpload_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CVideo_BeginGameRecordingSegmentsUpload_Response {
    pub fn new() -> CVideo_BeginGameRecordingSegmentsUpload_Response {
        ::std::default::Default::default()
    }

    // optional bool call_again = 2;

    pub fn call_again(&self) -> bool {
        self.call_again.unwrap_or(false)
    }

    pub fn clear_call_again(&mut self) {
        self.call_again = ::std::option::Option::None;
    }

    pub fn has_call_again(&self) -> bool {
        self.call_again.is_some()
    }

    // Param is passed by value, moved
    pub fn set_call_again(&mut self, v: bool) {
        self.call_again = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CVideo_BeginGameRecordingSegmentsUpload_Response {
    const NAME: &'static str = "CVideo_BeginGameRecordingSegmentsUpload_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.segments_needed.push(is.read_message()?);
                },
                16 => {
                    self.call_again = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.segments_needed {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.call_again {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.segments_needed {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.call_again {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVideo_BeginGameRecordingSegmentsUpload_Response {
        CVideo_BeginGameRecordingSegmentsUpload_Response::new()
    }

    fn clear(&mut self) {
        self.segments_needed.clear();
        self.call_again = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVideo_BeginGameRecordingSegmentsUpload_Response {
        static instance: CVideo_BeginGameRecordingSegmentsUpload_Response = CVideo_BeginGameRecordingSegmentsUpload_Response {
            segments_needed: ::std::vec::Vec::new(),
            call_again: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CVideo_CommitGameRecordingSegmentsUpload_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVideo_CommitGameRecordingSegmentsUpload_Request {
    // message fields
    // @@protoc_insertion_point(field:CVideo_CommitGameRecordingSegmentsUpload_Request.recording_id)
    pub recording_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CVideo_CommitGameRecordingSegmentsUpload_Request.component_name)
    pub component_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CVideo_CommitGameRecordingSegmentsUpload_Request.representation_name)
    pub representation_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CVideo_CommitGameRecordingSegmentsUpload_Request.first_segment_number)
    pub first_segment_number: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CVideo_CommitGameRecordingSegmentsUpload_Request.num_segments)
    pub num_segments: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CVideo_CommitGameRecordingSegmentsUpload_Request.upload_result)
    pub upload_result: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CVideo_CommitGameRecordingSegmentsUpload_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVideo_CommitGameRecordingSegmentsUpload_Request {
    fn default() -> &'a CVideo_CommitGameRecordingSegmentsUpload_Request {
        <CVideo_CommitGameRecordingSegmentsUpload_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CVideo_CommitGameRecordingSegmentsUpload_Request {
    pub fn new() -> CVideo_CommitGameRecordingSegmentsUpload_Request {
        ::std::default::Default::default()
    }

    // optional uint64 recording_id = 1;

    pub fn recording_id(&self) -> u64 {
        self.recording_id.unwrap_or(0)
    }

    pub fn clear_recording_id(&mut self) {
        self.recording_id = ::std::option::Option::None;
    }

    pub fn has_recording_id(&self) -> bool {
        self.recording_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recording_id(&mut self, v: u64) {
        self.recording_id = ::std::option::Option::Some(v);
    }

    // optional string component_name = 2;

    pub fn component_name(&self) -> &str {
        match self.component_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_component_name(&mut self) {
        self.component_name = ::std::option::Option::None;
    }

    pub fn has_component_name(&self) -> bool {
        self.component_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_component_name(&mut self, v: ::std::string::String) {
        self.component_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_component_name(&mut self) -> &mut ::std::string::String {
        if self.component_name.is_none() {
            self.component_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.component_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_component_name(&mut self) -> ::std::string::String {
        self.component_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string representation_name = 3;

    pub fn representation_name(&self) -> &str {
        match self.representation_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_representation_name(&mut self) {
        self.representation_name = ::std::option::Option::None;
    }

    pub fn has_representation_name(&self) -> bool {
        self.representation_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_representation_name(&mut self, v: ::std::string::String) {
        self.representation_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_representation_name(&mut self) -> &mut ::std::string::String {
        if self.representation_name.is_none() {
            self.representation_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.representation_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_representation_name(&mut self) -> ::std::string::String {
        self.representation_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 first_segment_number = 4;

    pub fn first_segment_number(&self) -> u32 {
        self.first_segment_number.unwrap_or(0)
    }

    pub fn clear_first_segment_number(&mut self) {
        self.first_segment_number = ::std::option::Option::None;
    }

    pub fn has_first_segment_number(&self) -> bool {
        self.first_segment_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_first_segment_number(&mut self, v: u32) {
        self.first_segment_number = ::std::option::Option::Some(v);
    }

    // optional uint32 num_segments = 5;

    pub fn num_segments(&self) -> u32 {
        self.num_segments.unwrap_or(0)
    }

    pub fn clear_num_segments(&mut self) {
        self.num_segments = ::std::option::Option::None;
    }

    pub fn has_num_segments(&self) -> bool {
        self.num_segments.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_segments(&mut self, v: u32) {
        self.num_segments = ::std::option::Option::Some(v);
    }

    // optional uint32 upload_result = 6;

    pub fn upload_result(&self) -> u32 {
        self.upload_result.unwrap_or(0)
    }

    pub fn clear_upload_result(&mut self) {
        self.upload_result = ::std::option::Option::None;
    }

    pub fn has_upload_result(&self) -> bool {
        self.upload_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upload_result(&mut self, v: u32) {
        self.upload_result = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CVideo_CommitGameRecordingSegmentsUpload_Request {
    const NAME: &'static str = "CVideo_CommitGameRecordingSegmentsUpload_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.recording_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.component_name = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.representation_name = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.first_segment_number = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.num_segments = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.upload_result = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.recording_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.component_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.representation_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.first_segment_number {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.num_segments {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.upload_result {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.recording_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.component_name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.representation_name.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.first_segment_number {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.num_segments {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.upload_result {
            os.write_uint32(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVideo_CommitGameRecordingSegmentsUpload_Request {
        CVideo_CommitGameRecordingSegmentsUpload_Request::new()
    }

    fn clear(&mut self) {
        self.recording_id = ::std::option::Option::None;
        self.component_name = ::std::option::Option::None;
        self.representation_name = ::std::option::Option::None;
        self.first_segment_number = ::std::option::Option::None;
        self.num_segments = ::std::option::Option::None;
        self.upload_result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVideo_CommitGameRecordingSegmentsUpload_Request {
        static instance: CVideo_CommitGameRecordingSegmentsUpload_Request = CVideo_CommitGameRecordingSegmentsUpload_Request {
            recording_id: ::std::option::Option::None,
            component_name: ::std::option::Option::None,
            representation_name: ::std::option::Option::None,
            first_segment_number: ::std::option::Option::None,
            num_segments: ::std::option::Option::None,
            upload_result: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CVideo_CommitGameRecordingSegmentsUpload_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVideo_CommitGameRecordingSegmentsUpload_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CVideo_CommitGameRecordingSegmentsUpload_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVideo_CommitGameRecordingSegmentsUpload_Response {
    fn default() -> &'a CVideo_CommitGameRecordingSegmentsUpload_Response {
        <CVideo_CommitGameRecordingSegmentsUpload_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CVideo_CommitGameRecordingSegmentsUpload_Response {
    pub fn new() -> CVideo_CommitGameRecordingSegmentsUpload_Response {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CVideo_CommitGameRecordingSegmentsUpload_Response {
    const NAME: &'static str = "CVideo_CommitGameRecordingSegmentsUpload_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVideo_CommitGameRecordingSegmentsUpload_Response {
        CVideo_CommitGameRecordingSegmentsUpload_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVideo_CommitGameRecordingSegmentsUpload_Response {
        static instance: CVideo_CommitGameRecordingSegmentsUpload_Response = CVideo_CommitGameRecordingSegmentsUpload_Response {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request {
    // message fields
    // @@protoc_insertion_point(field:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request.recording_id)
    pub recording_id: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request {
    fn default() -> &'a CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request {
        <CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request {
    pub fn new() -> CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request {
        ::std::default::Default::default()
    }

    // optional uint64 recording_id = 1;

    pub fn recording_id(&self) -> u64 {
        self.recording_id.unwrap_or(0)
    }

    pub fn clear_recording_id(&mut self) {
        self.recording_id = ::std::option::Option::None;
    }

    pub fn has_recording_id(&self) -> bool {
        self.recording_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recording_id(&mut self, v: u64) {
        self.recording_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request {
    const NAME: &'static str = "CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.recording_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.recording_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.recording_id {
            os.write_uint64(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request {
        CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request::new()
    }

    fn clear(&mut self) {
        self.recording_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request {
        static instance: CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request = CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request {
            recording_id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response {
    // message fields
    // @@protoc_insertion_point(field:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response.segments_needed)
    pub segments_needed: ::std::vec::Vec<super::steammessages_clientserver_video::CVideo_GameRecordingSegmentUploadInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response {
    fn default() -> &'a CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response {
        <CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response {
    pub fn new() -> CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response {
    const NAME: &'static str = "CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.segments_needed.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.segments_needed {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.segments_needed {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response {
        CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response::new()
    }

    fn clear(&mut self) {
        self.segments_needed.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response {
        static instance: CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response = CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response {
            segments_needed: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CVideo_GameRecordingCommitSegmentUploads_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVideo_GameRecordingCommitSegmentUploads_Request {
    // message fields
    // @@protoc_insertion_point(field:CVideo_GameRecordingCommitSegmentUploads_Request.recording_id)
    pub recording_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:CVideo_GameRecordingCommitSegmentUploads_Request.segments_uploaded)
    pub segments_uploaded: ::std::vec::Vec<super::steammessages_clientserver_video::CVideo_GameRecordingSegmentInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:CVideo_GameRecordingCommitSegmentUploads_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVideo_GameRecordingCommitSegmentUploads_Request {
    fn default() -> &'a CVideo_GameRecordingCommitSegmentUploads_Request {
        <CVideo_GameRecordingCommitSegmentUploads_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CVideo_GameRecordingCommitSegmentUploads_Request {
    pub fn new() -> CVideo_GameRecordingCommitSegmentUploads_Request {
        ::std::default::Default::default()
    }

    // optional uint64 recording_id = 1;

    pub fn recording_id(&self) -> u64 {
        self.recording_id.unwrap_or(0)
    }

    pub fn clear_recording_id(&mut self) {
        self.recording_id = ::std::option::Option::None;
    }

    pub fn has_recording_id(&self) -> bool {
        self.recording_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recording_id(&mut self, v: u64) {
        self.recording_id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CVideo_GameRecordingCommitSegmentUploads_Request {
    const NAME: &'static str = "CVideo_GameRecordingCommitSegmentUploads_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.recording_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.segments_uploaded.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.recording_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        for value in &self.segments_uploaded {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.recording_id {
            os.write_uint64(1, v)?;
        }
        for v in &self.segments_uploaded {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVideo_GameRecordingCommitSegmentUploads_Request {
        CVideo_GameRecordingCommitSegmentUploads_Request::new()
    }

    fn clear(&mut self) {
        self.recording_id = ::std::option::Option::None;
        self.segments_uploaded.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVideo_GameRecordingCommitSegmentUploads_Request {
        static instance: CVideo_GameRecordingCommitSegmentUploads_Request = CVideo_GameRecordingCommitSegmentUploads_Request {
            recording_id: ::std::option::Option::None,
            segments_uploaded: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CVideo_GameRecordingCommitSegmentUploads_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CVideo_GameRecordingCommitSegmentUploads_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CVideo_GameRecordingCommitSegmentUploads_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CVideo_GameRecordingCommitSegmentUploads_Response {
    fn default() -> &'a CVideo_GameRecordingCommitSegmentUploads_Response {
        <CVideo_GameRecordingCommitSegmentUploads_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CVideo_GameRecordingCommitSegmentUploads_Response {
    pub fn new() -> CVideo_GameRecordingCommitSegmentUploads_Response {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CVideo_GameRecordingCommitSegmentUploads_Response {
    const NAME: &'static str = "CVideo_GameRecordingCommitSegmentUploads_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CVideo_GameRecordingCommitSegmentUploads_Response {
        CVideo_GameRecordingCommitSegmentUploads_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CVideo_GameRecordingCommitSegmentUploads_Response {
        static instance: CVideo_GameRecordingCommitSegmentUploads_Response = CVideo_GameRecordingCommitSegmentUploads_Response {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}


const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::steammessages_base::*;
#[allow(unused_imports)]
use crate::steammessages_unified_base_steamclient::*;
#[allow(unused_imports)]
use crate::steammessages_clientserver_video::*;
impl ::steam_vent_proto_common::RpcMessage for CVideoManagerClipID {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGameRecordingClip {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGameRecording_CreateShareClip_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGameRecording_CreateShareClip_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGameRecording_DeleteSharedClip_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGameRecording_DeleteSharedClip_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CGameRecording_GetSingleSharedClip_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CGameRecording_GetSingleSharedClip_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CVideo_BeginGameRecordingSegmentsUpload_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CVideo_BeginGameRecordingSegmentsUpload_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CVideo_CommitGameRecordingSegmentsUpload_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CVideo_CommitGameRecordingSegmentsUpload_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CVideo_GameRecordingCommitSegmentUploads_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CVideo_GameRecordingCommitSegmentUploads_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
///
struct GameRecordingClip {}
impl ::steam_vent_proto_common::RpcService for GameRecordingClip {
    const SERVICE_NAME: &'static str = "GameRecordingClip";
}
///
struct VideoClip {}
impl ::steam_vent_proto_common::RpcService for VideoClip {
    const SERVICE_NAME: &'static str = "VideoClip";
}
impl ::steam_vent_proto_common::RpcMethod for CGameRecording_CreateShareClip_Request {
    const METHOD_NAME: &'static str = "GameRecordingClip.CreateShareClip#1";
    type Response = CGameRecording_CreateShareClip_Response;
}
impl ::steam_vent_proto_common::RpcMethod for CGameRecording_DeleteSharedClip_Request {
    const METHOD_NAME: &'static str = "GameRecordingClip.DeleteSharedClip#1";
    type Response = CGameRecording_DeleteSharedClip_Response;
}
impl ::steam_vent_proto_common::RpcMethod
for CGameRecording_GetSingleSharedClip_Request {
    const METHOD_NAME: &'static str = "GameRecordingClip.GetSingleSharedClip#1";
    type Response = CGameRecording_GetSingleSharedClip_Response;
}
impl ::steam_vent_proto_common::RpcMethod
for CVideo_BeginGameRecordingSegmentsUpload_Request {
    const METHOD_NAME: &'static str = "VideoClip.BeginGameRecordingSegmentsUpload#1";
    type Response = CVideo_BeginGameRecordingSegmentsUpload_Response;
}
impl ::steam_vent_proto_common::RpcMethod
for CVideo_CommitGameRecordingSegmentsUpload_Request {
    const METHOD_NAME: &'static str = "VideoClip.CommitGameRecordingSegmentsUpload#1";
    type Response = CVideo_CommitGameRecordingSegmentsUpload_Response;
}
impl ::steam_vent_proto_common::RpcMethod
for CVideo_GameRecordingCommitSegmentUploads_Request {
    const METHOD_NAME: &'static str = "VideoClip.CommitSegmentUploads#1";
    type Response = CVideo_GameRecordingCommitSegmentUploads_Response;
}
impl ::steam_vent_proto_common::RpcMethod
for CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Request {
    const METHOD_NAME: &'static str = "VideoClip.GetNextBatchOfSegmentsToUpload#1";
    type Response = CVideo_GameRecordingGetNextBatchOfSegmentsToUpload_Response;
}
