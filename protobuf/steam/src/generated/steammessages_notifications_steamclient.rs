// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_notifications.steamclient.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:SteamNotificationData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SteamNotificationData {
    // message fields
    // @@protoc_insertion_point(field:SteamNotificationData.notification_id)
    pub notification_id: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:SteamNotificationData.notification_targets)
    pub notification_targets: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:SteamNotificationData.notification_type)
    pub notification_type: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<ESteamNotificationType>>,
    // @@protoc_insertion_point(field:SteamNotificationData.body_data)
    pub body_data: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:SteamNotificationData.read)
    pub read: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:SteamNotificationData.timestamp)
    pub timestamp: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:SteamNotificationData.hidden)
    pub hidden: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:SteamNotificationData.expiry)
    pub expiry: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:SteamNotificationData.viewed)
    pub viewed: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:SteamNotificationData.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SteamNotificationData {
    fn default() -> &'a SteamNotificationData {
        <SteamNotificationData as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl SteamNotificationData {
    pub fn new() -> SteamNotificationData {
        ::std::default::Default::default()
    }

    // optional uint64 notification_id = 1;

    pub fn notification_id(&self) -> u64 {
        self.notification_id.unwrap_or(0)
    }

    pub fn clear_notification_id(&mut self) {
        self.notification_id = ::std::option::Option::None;
    }

    pub fn has_notification_id(&self) -> bool {
        self.notification_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_notification_id(&mut self, v: u64) {
        self.notification_id = ::std::option::Option::Some(v);
    }

    // optional uint32 notification_targets = 2;

    pub fn notification_targets(&self) -> u32 {
        self.notification_targets.unwrap_or(0)
    }

    pub fn clear_notification_targets(&mut self) {
        self.notification_targets = ::std::option::Option::None;
    }

    pub fn has_notification_targets(&self) -> bool {
        self.notification_targets.is_some()
    }

    // Param is passed by value, moved
    pub fn set_notification_targets(&mut self, v: u32) {
        self.notification_targets = ::std::option::Option::Some(v);
    }

    // optional .ESteamNotificationType notification_type = 3;

    pub fn notification_type(&self) -> ESteamNotificationType {
        match self.notification_type {
            Some(e) => e.enum_value_or(ESteamNotificationType::k_ESteamNotificationType_Invalid),
            None => ESteamNotificationType::k_ESteamNotificationType_Invalid,
        }
    }

    pub fn clear_notification_type(&mut self) {
        self.notification_type = ::std::option::Option::None;
    }

    pub fn has_notification_type(&self) -> bool {
        self.notification_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_notification_type(&mut self, v: ESteamNotificationType) {
        self.notification_type = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional string body_data = 4;

    pub fn body_data(&self) -> &str {
        match self.body_data.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_body_data(&mut self) {
        self.body_data = ::std::option::Option::None;
    }

    pub fn has_body_data(&self) -> bool {
        self.body_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body_data(&mut self, v: ::std::string::String) {
        self.body_data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body_data(&mut self) -> &mut ::std::string::String {
        if self.body_data.is_none() {
            self.body_data = ::std::option::Option::Some(::std::string::String::new());
        }
        self.body_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_body_data(&mut self) -> ::std::string::String {
        self.body_data.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool read = 7;

    pub fn read(&self) -> bool {
        self.read.unwrap_or(false)
    }

    pub fn clear_read(&mut self) {
        self.read = ::std::option::Option::None;
    }

    pub fn has_read(&self) -> bool {
        self.read.is_some()
    }

    // Param is passed by value, moved
    pub fn set_read(&mut self, v: bool) {
        self.read = ::std::option::Option::Some(v);
    }

    // optional uint32 timestamp = 8;

    pub fn timestamp(&self) -> u32 {
        self.timestamp.unwrap_or(0)
    }

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u32) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // optional bool hidden = 9;

    pub fn hidden(&self) -> bool {
        self.hidden.unwrap_or(false)
    }

    pub fn clear_hidden(&mut self) {
        self.hidden = ::std::option::Option::None;
    }

    pub fn has_hidden(&self) -> bool {
        self.hidden.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hidden(&mut self, v: bool) {
        self.hidden = ::std::option::Option::Some(v);
    }

    // optional uint32 expiry = 10;

    pub fn expiry(&self) -> u32 {
        self.expiry.unwrap_or(0)
    }

    pub fn clear_expiry(&mut self) {
        self.expiry = ::std::option::Option::None;
    }

    pub fn has_expiry(&self) -> bool {
        self.expiry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expiry(&mut self, v: u32) {
        self.expiry = ::std::option::Option::Some(v);
    }

    // optional uint32 viewed = 11;

    pub fn viewed(&self) -> u32 {
        self.viewed.unwrap_or(0)
    }

    pub fn clear_viewed(&mut self) {
        self.viewed = ::std::option::Option::None;
    }

    pub fn has_viewed(&self) -> bool {
        self.viewed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_viewed(&mut self, v: u32) {
        self.viewed = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for SteamNotificationData {
    const NAME: &'static str = "SteamNotificationData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.notification_id = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.notification_targets = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.notification_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                34 => {
                    self.body_data = ::std::option::Option::Some(is.read_string()?);
                },
                56 => {
                    self.read = ::std::option::Option::Some(is.read_bool()?);
                },
                64 => {
                    self.timestamp = ::std::option::Option::Some(is.read_uint32()?);
                },
                72 => {
                    self.hidden = ::std::option::Option::Some(is.read_bool()?);
                },
                80 => {
                    self.expiry = ::std::option::Option::Some(is.read_uint32()?);
                },
                88 => {
                    self.viewed = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.notification_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.notification_targets {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.notification_type {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.body_data.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.read {
            my_size += 1 + 1;
        }
        if let Some(v) = self.timestamp {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(8, v);
        }
        if let Some(v) = self.hidden {
            my_size += 1 + 1;
        }
        if let Some(v) = self.expiry {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(10, v);
        }
        if let Some(v) = self.viewed {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(11, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.notification_id {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.notification_targets {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.notification_type {
            os.write_enum(3, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.body_data.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.read {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.timestamp {
            os.write_uint32(8, v)?;
        }
        if let Some(v) = self.hidden {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.expiry {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.viewed {
            os.write_uint32(11, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SteamNotificationData {
        SteamNotificationData::new()
    }

    fn clear(&mut self) {
        self.notification_id = ::std::option::Option::None;
        self.notification_targets = ::std::option::Option::None;
        self.notification_type = ::std::option::Option::None;
        self.body_data = ::std::option::Option::None;
        self.read = ::std::option::Option::None;
        self.timestamp = ::std::option::Option::None;
        self.hidden = ::std::option::Option::None;
        self.expiry = ::std::option::Option::None;
        self.viewed = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SteamNotificationData {
        static instance: SteamNotificationData = SteamNotificationData {
            notification_id: ::std::option::Option::None,
            notification_targets: ::std::option::Option::None,
            notification_type: ::std::option::Option::None,
            body_data: ::std::option::Option::None,
            read: ::std::option::Option::None,
            timestamp: ::std::option::Option::None,
            hidden: ::std::option::Option::None,
            expiry: ::std::option::Option::None,
            viewed: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CSteamNotification_NotificationsReceived_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamNotification_NotificationsReceived_Notification {
    // message fields
    // @@protoc_insertion_point(field:CSteamNotification_NotificationsReceived_Notification.notifications)
    pub notifications: ::std::vec::Vec<SteamNotificationData>,
    // @@protoc_insertion_point(field:CSteamNotification_NotificationsReceived_Notification.pending_gift_count)
    pub pending_gift_count: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSteamNotification_NotificationsReceived_Notification.pending_friend_count)
    pub pending_friend_count: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CSteamNotification_NotificationsReceived_Notification.pending_family_invite_count)
    pub pending_family_invite_count: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CSteamNotification_NotificationsReceived_Notification.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamNotification_NotificationsReceived_Notification {
    fn default() -> &'a CSteamNotification_NotificationsReceived_Notification {
        <CSteamNotification_NotificationsReceived_Notification as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CSteamNotification_NotificationsReceived_Notification {
    pub fn new() -> CSteamNotification_NotificationsReceived_Notification {
        ::std::default::Default::default()
    }

    // optional uint32 pending_gift_count = 2;

    pub fn pending_gift_count(&self) -> u32 {
        self.pending_gift_count.unwrap_or(0)
    }

    pub fn clear_pending_gift_count(&mut self) {
        self.pending_gift_count = ::std::option::Option::None;
    }

    pub fn has_pending_gift_count(&self) -> bool {
        self.pending_gift_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pending_gift_count(&mut self, v: u32) {
        self.pending_gift_count = ::std::option::Option::Some(v);
    }

    // optional uint32 pending_friend_count = 3;

    pub fn pending_friend_count(&self) -> u32 {
        self.pending_friend_count.unwrap_or(0)
    }

    pub fn clear_pending_friend_count(&mut self) {
        self.pending_friend_count = ::std::option::Option::None;
    }

    pub fn has_pending_friend_count(&self) -> bool {
        self.pending_friend_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pending_friend_count(&mut self, v: u32) {
        self.pending_friend_count = ::std::option::Option::Some(v);
    }

    // optional uint32 pending_family_invite_count = 4;

    pub fn pending_family_invite_count(&self) -> u32 {
        self.pending_family_invite_count.unwrap_or(0)
    }

    pub fn clear_pending_family_invite_count(&mut self) {
        self.pending_family_invite_count = ::std::option::Option::None;
    }

    pub fn has_pending_family_invite_count(&self) -> bool {
        self.pending_family_invite_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pending_family_invite_count(&mut self, v: u32) {
        self.pending_family_invite_count = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CSteamNotification_NotificationsReceived_Notification {
    const NAME: &'static str = "CSteamNotification_NotificationsReceived_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.notifications.push(is.read_message()?);
                },
                16 => {
                    self.pending_gift_count = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.pending_friend_count = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.pending_family_invite_count = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.notifications {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.pending_gift_count {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.pending_friend_count {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.pending_family_invite_count {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.notifications {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if let Some(v) = self.pending_gift_count {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.pending_friend_count {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.pending_family_invite_count {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamNotification_NotificationsReceived_Notification {
        CSteamNotification_NotificationsReceived_Notification::new()
    }

    fn clear(&mut self) {
        self.notifications.clear();
        self.pending_gift_count = ::std::option::Option::None;
        self.pending_friend_count = ::std::option::Option::None;
        self.pending_family_invite_count = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamNotification_NotificationsReceived_Notification {
        static instance: CSteamNotification_NotificationsReceived_Notification = CSteamNotification_NotificationsReceived_Notification {
            notifications: ::std::vec::Vec::new(),
            pending_gift_count: ::std::option::Option::None,
            pending_friend_count: ::std::option::Option::None,
            pending_family_invite_count: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:SteamNotificationPreference)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SteamNotificationPreference {
    // message fields
    // @@protoc_insertion_point(field:SteamNotificationPreference.notification_type)
    pub notification_type: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<ESteamNotificationType>>,
    // @@protoc_insertion_point(field:SteamNotificationPreference.notification_targets)
    pub notification_targets: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:SteamNotificationPreference.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SteamNotificationPreference {
    fn default() -> &'a SteamNotificationPreference {
        <SteamNotificationPreference as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl SteamNotificationPreference {
    pub fn new() -> SteamNotificationPreference {
        ::std::default::Default::default()
    }

    // optional .ESteamNotificationType notification_type = 1;

    pub fn notification_type(&self) -> ESteamNotificationType {
        match self.notification_type {
            Some(e) => e.enum_value_or(ESteamNotificationType::k_ESteamNotificationType_Invalid),
            None => ESteamNotificationType::k_ESteamNotificationType_Invalid,
        }
    }

    pub fn clear_notification_type(&mut self) {
        self.notification_type = ::std::option::Option::None;
    }

    pub fn has_notification_type(&self) -> bool {
        self.notification_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_notification_type(&mut self, v: ESteamNotificationType) {
        self.notification_type = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 notification_targets = 2;

    pub fn notification_targets(&self) -> u32 {
        self.notification_targets.unwrap_or(0)
    }

    pub fn clear_notification_targets(&mut self) {
        self.notification_targets = ::std::option::Option::None;
    }

    pub fn has_notification_targets(&self) -> bool {
        self.notification_targets.is_some()
    }

    // Param is passed by value, moved
    pub fn set_notification_targets(&mut self, v: u32) {
        self.notification_targets = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for SteamNotificationPreference {
    const NAME: &'static str = "SteamNotificationPreference";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.notification_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.notification_targets = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.notification_type {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.notification_targets {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.notification_type {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.notification_targets {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SteamNotificationPreference {
        SteamNotificationPreference::new()
    }

    fn clear(&mut self) {
        self.notification_type = ::std::option::Option::None;
        self.notification_targets = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SteamNotificationPreference {
        static instance: SteamNotificationPreference = SteamNotificationPreference {
            notification_type: ::std::option::Option::None,
            notification_targets: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CSteamNotification_PreferencesUpdated_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CSteamNotification_PreferencesUpdated_Notification {
    // message fields
    // @@protoc_insertion_point(field:CSteamNotification_PreferencesUpdated_Notification.preferences)
    pub preferences: ::std::vec::Vec<SteamNotificationPreference>,
    // special fields
    // @@protoc_insertion_point(special_field:CSteamNotification_PreferencesUpdated_Notification.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CSteamNotification_PreferencesUpdated_Notification {
    fn default() -> &'a CSteamNotification_PreferencesUpdated_Notification {
        <CSteamNotification_PreferencesUpdated_Notification as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CSteamNotification_PreferencesUpdated_Notification {
    pub fn new() -> CSteamNotification_PreferencesUpdated_Notification {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CSteamNotification_PreferencesUpdated_Notification {
    const NAME: &'static str = "CSteamNotification_PreferencesUpdated_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.preferences.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.preferences {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        for v in &self.preferences {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CSteamNotification_PreferencesUpdated_Notification {
        CSteamNotification_PreferencesUpdated_Notification::new()
    }

    fn clear(&mut self) {
        self.preferences.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CSteamNotification_PreferencesUpdated_Notification {
        static instance: CSteamNotification_PreferencesUpdated_Notification = CSteamNotification_PreferencesUpdated_Notification {
            preferences: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ESteamNotificationType)
pub enum ESteamNotificationType {
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_Invalid)
    k_ESteamNotificationType_Invalid = 0,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_Test)
    k_ESteamNotificationType_Test = 1,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_Gift)
    k_ESteamNotificationType_Gift = 2,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_Comment)
    k_ESteamNotificationType_Comment = 3,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_Item)
    k_ESteamNotificationType_Item = 4,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_FriendInvite)
    k_ESteamNotificationType_FriendInvite = 5,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_MajorSale)
    k_ESteamNotificationType_MajorSale = 6,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_PreloadAvailable)
    k_ESteamNotificationType_PreloadAvailable = 7,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_Wishlist)
    k_ESteamNotificationType_Wishlist = 8,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_TradeOffer)
    k_ESteamNotificationType_TradeOffer = 9,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_General)
    k_ESteamNotificationType_General = 10,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_HelpRequest)
    k_ESteamNotificationType_HelpRequest = 11,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_AsyncGame)
    k_ESteamNotificationType_AsyncGame = 12,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_ChatMsg)
    k_ESteamNotificationType_ChatMsg = 13,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_ModeratorMsg)
    k_ESteamNotificationType_ModeratorMsg = 14,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_ParentalFeatureAccessRequest)
    k_ESteamNotificationType_ParentalFeatureAccessRequest = 15,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_FamilyInvite)
    k_ESteamNotificationType_FamilyInvite = 16,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_FamilyPurchaseRequest)
    k_ESteamNotificationType_FamilyPurchaseRequest = 17,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_ParentalPlaytimeRequest)
    k_ESteamNotificationType_ParentalPlaytimeRequest = 18,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_FamilyPurchaseRequestResponse)
    k_ESteamNotificationType_FamilyPurchaseRequestResponse = 19,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_ParentalFeatureAccessResponse)
    k_ESteamNotificationType_ParentalFeatureAccessResponse = 20,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_ParentalPlaytimeResponse)
    k_ESteamNotificationType_ParentalPlaytimeResponse = 21,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_RequestedGameAdded)
    k_ESteamNotificationType_RequestedGameAdded = 22,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_SendToPhone)
    k_ESteamNotificationType_SendToPhone = 23,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_ClipDownloaded)
    k_ESteamNotificationType_ClipDownloaded = 24,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_2FAPrompt)
    k_ESteamNotificationType_2FAPrompt = 25,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_MobileConfirmation)
    k_ESteamNotificationType_MobileConfirmation = 26,
    // @@protoc_insertion_point(enum_value:ESteamNotificationType.k_ESteamNotificationType_PartnerEvent)
    k_ESteamNotificationType_PartnerEvent = 27,
}

impl ::steam_vent_proto_common::protobuf::Enum for ESteamNotificationType {
    const NAME: &'static str = "ESteamNotificationType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ESteamNotificationType> {
        match value {
            0 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_Invalid),
            1 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_Test),
            2 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_Gift),
            3 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_Comment),
            4 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_Item),
            5 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_FriendInvite),
            6 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_MajorSale),
            7 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_PreloadAvailable),
            8 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_Wishlist),
            9 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_TradeOffer),
            10 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_General),
            11 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_HelpRequest),
            12 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_AsyncGame),
            13 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_ChatMsg),
            14 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_ModeratorMsg),
            15 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_ParentalFeatureAccessRequest),
            16 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_FamilyInvite),
            17 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_FamilyPurchaseRequest),
            18 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_ParentalPlaytimeRequest),
            19 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_FamilyPurchaseRequestResponse),
            20 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_ParentalFeatureAccessResponse),
            21 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_ParentalPlaytimeResponse),
            22 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_RequestedGameAdded),
            23 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_SendToPhone),
            24 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_ClipDownloaded),
            25 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_2FAPrompt),
            26 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_MobileConfirmation),
            27 => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_PartnerEvent),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ESteamNotificationType> {
        match str {
            "k_ESteamNotificationType_Invalid" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_Invalid),
            "k_ESteamNotificationType_Test" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_Test),
            "k_ESteamNotificationType_Gift" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_Gift),
            "k_ESteamNotificationType_Comment" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_Comment),
            "k_ESteamNotificationType_Item" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_Item),
            "k_ESteamNotificationType_FriendInvite" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_FriendInvite),
            "k_ESteamNotificationType_MajorSale" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_MajorSale),
            "k_ESteamNotificationType_PreloadAvailable" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_PreloadAvailable),
            "k_ESteamNotificationType_Wishlist" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_Wishlist),
            "k_ESteamNotificationType_TradeOffer" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_TradeOffer),
            "k_ESteamNotificationType_General" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_General),
            "k_ESteamNotificationType_HelpRequest" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_HelpRequest),
            "k_ESteamNotificationType_AsyncGame" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_AsyncGame),
            "k_ESteamNotificationType_ChatMsg" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_ChatMsg),
            "k_ESteamNotificationType_ModeratorMsg" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_ModeratorMsg),
            "k_ESteamNotificationType_ParentalFeatureAccessRequest" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_ParentalFeatureAccessRequest),
            "k_ESteamNotificationType_FamilyInvite" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_FamilyInvite),
            "k_ESteamNotificationType_FamilyPurchaseRequest" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_FamilyPurchaseRequest),
            "k_ESteamNotificationType_ParentalPlaytimeRequest" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_ParentalPlaytimeRequest),
            "k_ESteamNotificationType_FamilyPurchaseRequestResponse" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_FamilyPurchaseRequestResponse),
            "k_ESteamNotificationType_ParentalFeatureAccessResponse" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_ParentalFeatureAccessResponse),
            "k_ESteamNotificationType_ParentalPlaytimeResponse" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_ParentalPlaytimeResponse),
            "k_ESteamNotificationType_RequestedGameAdded" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_RequestedGameAdded),
            "k_ESteamNotificationType_SendToPhone" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_SendToPhone),
            "k_ESteamNotificationType_ClipDownloaded" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_ClipDownloaded),
            "k_ESteamNotificationType_2FAPrompt" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_2FAPrompt),
            "k_ESteamNotificationType_MobileConfirmation" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_MobileConfirmation),
            "k_ESteamNotificationType_PartnerEvent" => ::std::option::Option::Some(ESteamNotificationType::k_ESteamNotificationType_PartnerEvent),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ESteamNotificationType] = &[
        ESteamNotificationType::k_ESteamNotificationType_Invalid,
        ESteamNotificationType::k_ESteamNotificationType_Test,
        ESteamNotificationType::k_ESteamNotificationType_Gift,
        ESteamNotificationType::k_ESteamNotificationType_Comment,
        ESteamNotificationType::k_ESteamNotificationType_Item,
        ESteamNotificationType::k_ESteamNotificationType_FriendInvite,
        ESteamNotificationType::k_ESteamNotificationType_MajorSale,
        ESteamNotificationType::k_ESteamNotificationType_PreloadAvailable,
        ESteamNotificationType::k_ESteamNotificationType_Wishlist,
        ESteamNotificationType::k_ESteamNotificationType_TradeOffer,
        ESteamNotificationType::k_ESteamNotificationType_General,
        ESteamNotificationType::k_ESteamNotificationType_HelpRequest,
        ESteamNotificationType::k_ESteamNotificationType_AsyncGame,
        ESteamNotificationType::k_ESteamNotificationType_ChatMsg,
        ESteamNotificationType::k_ESteamNotificationType_ModeratorMsg,
        ESteamNotificationType::k_ESteamNotificationType_ParentalFeatureAccessRequest,
        ESteamNotificationType::k_ESteamNotificationType_FamilyInvite,
        ESteamNotificationType::k_ESteamNotificationType_FamilyPurchaseRequest,
        ESteamNotificationType::k_ESteamNotificationType_ParentalPlaytimeRequest,
        ESteamNotificationType::k_ESteamNotificationType_FamilyPurchaseRequestResponse,
        ESteamNotificationType::k_ESteamNotificationType_ParentalFeatureAccessResponse,
        ESteamNotificationType::k_ESteamNotificationType_ParentalPlaytimeResponse,
        ESteamNotificationType::k_ESteamNotificationType_RequestedGameAdded,
        ESteamNotificationType::k_ESteamNotificationType_SendToPhone,
        ESteamNotificationType::k_ESteamNotificationType_ClipDownloaded,
        ESteamNotificationType::k_ESteamNotificationType_2FAPrompt,
        ESteamNotificationType::k_ESteamNotificationType_MobileConfirmation,
        ESteamNotificationType::k_ESteamNotificationType_PartnerEvent,
    ];
}

impl ::std::default::Default for ESteamNotificationType {
    fn default() -> Self {
        ESteamNotificationType::k_ESteamNotificationType_Invalid
    }
}



const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::steammessages_base::*;
#[allow(unused_imports)]
use crate::steammessages_unified_base_steamclient::*;
impl ::steam_vent_proto_common::RpcMessage for SteamNotificationData {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CSteamNotification_NotificationsReceived_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for SteamNotificationPreference {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CSteamNotification_PreferencesUpdated_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
///
struct SteamNotificationClient {}
impl ::steam_vent_proto_common::RpcService for SteamNotificationClient {
    const SERVICE_NAME: &'static str = "SteamNotificationClient";
}
impl ::steam_vent_proto_common::RpcMethod
for CSteamNotification_NotificationsReceived_Notification {
    const METHOD_NAME: &'static str = "SteamNotificationClient.NotificationsReceived#1";
    type Response = ();
}
impl ::steam_vent_proto_common::RpcMethod
for CSteamNotification_PreferencesUpdated_Notification {
    const METHOD_NAME: &'static str = "SteamNotificationClient.PreferencesUpdated#1";
    type Response = ();
}
