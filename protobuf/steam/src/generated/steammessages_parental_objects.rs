// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `steammessages_parental_objects.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:ParentalApp)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ParentalApp {
    // message fields
    // @@protoc_insertion_point(field:ParentalApp.appid)
    pub appid: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalApp.is_allowed)
    pub is_allowed: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:ParentalApp.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ParentalApp {
    fn default() -> &'a ParentalApp {
        <ParentalApp as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl ParentalApp {
    pub fn new() -> ParentalApp {
        ::std::default::Default::default()
    }

    // optional uint32 appid = 1;

    pub fn appid(&self) -> u32 {
        self.appid.unwrap_or(0)
    }

    pub fn clear_appid(&mut self) {
        self.appid = ::std::option::Option::None;
    }

    pub fn has_appid(&self) -> bool {
        self.appid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_appid(&mut self, v: u32) {
        self.appid = ::std::option::Option::Some(v);
    }

    // optional bool is_allowed = 2;

    pub fn is_allowed(&self) -> bool {
        self.is_allowed.unwrap_or(false)
    }

    pub fn clear_is_allowed(&mut self) {
        self.is_allowed = ::std::option::Option::None;
    }

    pub fn has_is_allowed(&self) -> bool {
        self.is_allowed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_allowed(&mut self, v: bool) {
        self.is_allowed = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for ParentalApp {
    const NAME: &'static str = "ParentalApp";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.appid = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.is_allowed = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.appid {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.is_allowed {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.appid {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.is_allowed {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ParentalApp {
        ParentalApp::new()
    }

    fn clear(&mut self) {
        self.appid = ::std::option::Option::None;
        self.is_allowed = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ParentalApp {
        static instance: ParentalApp = ParentalApp {
            appid: ::std::option::Option::None,
            is_allowed: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:ParentalPlaytimeDay)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ParentalPlaytimeDay {
    // message fields
    // @@protoc_insertion_point(field:ParentalPlaytimeDay.allowed_time_windows)
    pub allowed_time_windows: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalPlaytimeDay.allowed_daily_minutes)
    pub allowed_daily_minutes: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:ParentalPlaytimeDay.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ParentalPlaytimeDay {
    fn default() -> &'a ParentalPlaytimeDay {
        <ParentalPlaytimeDay as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl ParentalPlaytimeDay {
    pub fn new() -> ParentalPlaytimeDay {
        ::std::default::Default::default()
    }

    // optional uint64 allowed_time_windows = 1;

    pub fn allowed_time_windows(&self) -> u64 {
        self.allowed_time_windows.unwrap_or(0)
    }

    pub fn clear_allowed_time_windows(&mut self) {
        self.allowed_time_windows = ::std::option::Option::None;
    }

    pub fn has_allowed_time_windows(&self) -> bool {
        self.allowed_time_windows.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allowed_time_windows(&mut self, v: u64) {
        self.allowed_time_windows = ::std::option::Option::Some(v);
    }

    // optional uint32 allowed_daily_minutes = 2;

    pub fn allowed_daily_minutes(&self) -> u32 {
        self.allowed_daily_minutes.unwrap_or(0)
    }

    pub fn clear_allowed_daily_minutes(&mut self) {
        self.allowed_daily_minutes = ::std::option::Option::None;
    }

    pub fn has_allowed_daily_minutes(&self) -> bool {
        self.allowed_daily_minutes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allowed_daily_minutes(&mut self, v: u32) {
        self.allowed_daily_minutes = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for ParentalPlaytimeDay {
    const NAME: &'static str = "ParentalPlaytimeDay";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.allowed_time_windows = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.allowed_daily_minutes = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.allowed_time_windows {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.allowed_daily_minutes {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.allowed_time_windows {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.allowed_daily_minutes {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ParentalPlaytimeDay {
        ParentalPlaytimeDay::new()
    }

    fn clear(&mut self) {
        self.allowed_time_windows = ::std::option::Option::None;
        self.allowed_daily_minutes = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ParentalPlaytimeDay {
        static instance: ParentalPlaytimeDay = ParentalPlaytimeDay {
            allowed_time_windows: ::std::option::Option::None,
            allowed_daily_minutes: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:ParentalPlaytimeRestrictions)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ParentalPlaytimeRestrictions {
    // message fields
    // @@protoc_insertion_point(field:ParentalPlaytimeRestrictions.apply_playtime_restrictions)
    pub apply_playtime_restrictions: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:ParentalPlaytimeRestrictions.playtime_days)
    pub playtime_days: ::std::vec::Vec<ParentalPlaytimeDay>,
    // special fields
    // @@protoc_insertion_point(special_field:ParentalPlaytimeRestrictions.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ParentalPlaytimeRestrictions {
    fn default() -> &'a ParentalPlaytimeRestrictions {
        <ParentalPlaytimeRestrictions as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl ParentalPlaytimeRestrictions {
    pub fn new() -> ParentalPlaytimeRestrictions {
        ::std::default::Default::default()
    }

    // optional bool apply_playtime_restrictions = 2;

    pub fn apply_playtime_restrictions(&self) -> bool {
        self.apply_playtime_restrictions.unwrap_or(false)
    }

    pub fn clear_apply_playtime_restrictions(&mut self) {
        self.apply_playtime_restrictions = ::std::option::Option::None;
    }

    pub fn has_apply_playtime_restrictions(&self) -> bool {
        self.apply_playtime_restrictions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_apply_playtime_restrictions(&mut self, v: bool) {
        self.apply_playtime_restrictions = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for ParentalPlaytimeRestrictions {
    const NAME: &'static str = "ParentalPlaytimeRestrictions";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.apply_playtime_restrictions = ::std::option::Option::Some(is.read_bool()?);
                },
                122 => {
                    self.playtime_days.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.apply_playtime_restrictions {
            my_size += 1 + 1;
        }
        for value in &self.playtime_days {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.apply_playtime_restrictions {
            os.write_bool(2, v)?;
        }
        for v in &self.playtime_days {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ParentalPlaytimeRestrictions {
        ParentalPlaytimeRestrictions::new()
    }

    fn clear(&mut self) {
        self.apply_playtime_restrictions = ::std::option::Option::None;
        self.playtime_days.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ParentalPlaytimeRestrictions {
        static instance: ParentalPlaytimeRestrictions = ParentalPlaytimeRestrictions {
            apply_playtime_restrictions: ::std::option::Option::None,
            playtime_days: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:ParentalTemporaryPlaytimeRestrictions)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ParentalTemporaryPlaytimeRestrictions {
    // message fields
    // @@protoc_insertion_point(field:ParentalTemporaryPlaytimeRestrictions.restrictions)
    pub restrictions: ::steam_vent_proto_common::protobuf::MessageField<ParentalPlaytimeDay>,
    // @@protoc_insertion_point(field:ParentalTemporaryPlaytimeRestrictions.rtime_expires)
    pub rtime_expires: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:ParentalTemporaryPlaytimeRestrictions.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ParentalTemporaryPlaytimeRestrictions {
    fn default() -> &'a ParentalTemporaryPlaytimeRestrictions {
        <ParentalTemporaryPlaytimeRestrictions as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl ParentalTemporaryPlaytimeRestrictions {
    pub fn new() -> ParentalTemporaryPlaytimeRestrictions {
        ::std::default::Default::default()
    }

    // optional uint32 rtime_expires = 2;

    pub fn rtime_expires(&self) -> u32 {
        self.rtime_expires.unwrap_or(0)
    }

    pub fn clear_rtime_expires(&mut self) {
        self.rtime_expires = ::std::option::Option::None;
    }

    pub fn has_rtime_expires(&self) -> bool {
        self.rtime_expires.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rtime_expires(&mut self, v: u32) {
        self.rtime_expires = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for ParentalTemporaryPlaytimeRestrictions {
    const NAME: &'static str = "ParentalTemporaryPlaytimeRestrictions";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.restrictions)?;
                },
                16 => {
                    self.rtime_expires = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.restrictions.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.rtime_expires {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.restrictions.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.rtime_expires {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ParentalTemporaryPlaytimeRestrictions {
        ParentalTemporaryPlaytimeRestrictions::new()
    }

    fn clear(&mut self) {
        self.restrictions.clear();
        self.rtime_expires = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ParentalTemporaryPlaytimeRestrictions {
        static instance: ParentalTemporaryPlaytimeRestrictions = ParentalTemporaryPlaytimeRestrictions {
            restrictions: ::steam_vent_proto_common::protobuf::MessageField::none(),
            rtime_expires: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:ParentalSettings)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ParentalSettings {
    // message fields
    // @@protoc_insertion_point(field:ParentalSettings.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalSettings.applist_base_id)
    pub applist_base_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalSettings.applist_base_description)
    pub applist_base_description: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ParentalSettings.applist_base)
    pub applist_base: ::std::vec::Vec<ParentalApp>,
    // @@protoc_insertion_point(field:ParentalSettings.applist_custom)
    pub applist_custom: ::std::vec::Vec<ParentalApp>,
    // @@protoc_insertion_point(field:ParentalSettings.passwordhashtype)
    pub passwordhashtype: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalSettings.salt)
    pub salt: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:ParentalSettings.passwordhash)
    pub passwordhash: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:ParentalSettings.is_enabled)
    pub is_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:ParentalSettings.enabled_features)
    pub enabled_features: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalSettings.recovery_email)
    pub recovery_email: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:ParentalSettings.is_site_license_lock)
    pub is_site_license_lock: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:ParentalSettings.temporary_enabled_features)
    pub temporary_enabled_features: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalSettings.rtime_temporary_feature_expiration)
    pub rtime_temporary_feature_expiration: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalSettings.playtime_restrictions)
    pub playtime_restrictions: ::steam_vent_proto_common::protobuf::MessageField<ParentalPlaytimeRestrictions>,
    // @@protoc_insertion_point(field:ParentalSettings.temporary_playtime_restrictions)
    pub temporary_playtime_restrictions: ::steam_vent_proto_common::protobuf::MessageField<ParentalTemporaryPlaytimeRestrictions>,
    // @@protoc_insertion_point(field:ParentalSettings.excluded_store_content_descriptors)
    pub excluded_store_content_descriptors: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ParentalSettings.excluded_community_content_descriptors)
    pub excluded_community_content_descriptors: ::std::vec::Vec<u32>,
    // @@protoc_insertion_point(field:ParentalSettings.utility_appids)
    pub utility_appids: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:ParentalSettings.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ParentalSettings {
    fn default() -> &'a ParentalSettings {
        <ParentalSettings as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl ParentalSettings {
    pub fn new() -> ParentalSettings {
        ::std::default::Default::default()
    }

    // optional fixed64 steamid = 1;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 applist_base_id = 2;

    pub fn applist_base_id(&self) -> u32 {
        self.applist_base_id.unwrap_or(0)
    }

    pub fn clear_applist_base_id(&mut self) {
        self.applist_base_id = ::std::option::Option::None;
    }

    pub fn has_applist_base_id(&self) -> bool {
        self.applist_base_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_applist_base_id(&mut self, v: u32) {
        self.applist_base_id = ::std::option::Option::Some(v);
    }

    // optional string applist_base_description = 3;

    pub fn applist_base_description(&self) -> &str {
        match self.applist_base_description.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_applist_base_description(&mut self) {
        self.applist_base_description = ::std::option::Option::None;
    }

    pub fn has_applist_base_description(&self) -> bool {
        self.applist_base_description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_applist_base_description(&mut self, v: ::std::string::String) {
        self.applist_base_description = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_applist_base_description(&mut self) -> &mut ::std::string::String {
        if self.applist_base_description.is_none() {
            self.applist_base_description = ::std::option::Option::Some(::std::string::String::new());
        }
        self.applist_base_description.as_mut().unwrap()
    }

    // Take field
    pub fn take_applist_base_description(&mut self) -> ::std::string::String {
        self.applist_base_description.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 passwordhashtype = 6;

    pub fn passwordhashtype(&self) -> u32 {
        self.passwordhashtype.unwrap_or(0)
    }

    pub fn clear_passwordhashtype(&mut self) {
        self.passwordhashtype = ::std::option::Option::None;
    }

    pub fn has_passwordhashtype(&self) -> bool {
        self.passwordhashtype.is_some()
    }

    // Param is passed by value, moved
    pub fn set_passwordhashtype(&mut self, v: u32) {
        self.passwordhashtype = ::std::option::Option::Some(v);
    }

    // optional bytes salt = 7;

    pub fn salt(&self) -> &[u8] {
        match self.salt.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_salt(&mut self) {
        self.salt = ::std::option::Option::None;
    }

    pub fn has_salt(&self) -> bool {
        self.salt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_salt(&mut self, v: ::std::vec::Vec<u8>) {
        self.salt = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_salt(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.salt.is_none() {
            self.salt = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.salt.as_mut().unwrap()
    }

    // Take field
    pub fn take_salt(&mut self) -> ::std::vec::Vec<u8> {
        self.salt.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes passwordhash = 8;

    pub fn passwordhash(&self) -> &[u8] {
        match self.passwordhash.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_passwordhash(&mut self) {
        self.passwordhash = ::std::option::Option::None;
    }

    pub fn has_passwordhash(&self) -> bool {
        self.passwordhash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_passwordhash(&mut self, v: ::std::vec::Vec<u8>) {
        self.passwordhash = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_passwordhash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.passwordhash.is_none() {
            self.passwordhash = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.passwordhash.as_mut().unwrap()
    }

    // Take field
    pub fn take_passwordhash(&mut self) -> ::std::vec::Vec<u8> {
        self.passwordhash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bool is_enabled = 9;

    pub fn is_enabled(&self) -> bool {
        self.is_enabled.unwrap_or(false)
    }

    pub fn clear_is_enabled(&mut self) {
        self.is_enabled = ::std::option::Option::None;
    }

    pub fn has_is_enabled(&self) -> bool {
        self.is_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_enabled(&mut self, v: bool) {
        self.is_enabled = ::std::option::Option::Some(v);
    }

    // optional uint32 enabled_features = 10;

    pub fn enabled_features(&self) -> u32 {
        self.enabled_features.unwrap_or(0)
    }

    pub fn clear_enabled_features(&mut self) {
        self.enabled_features = ::std::option::Option::None;
    }

    pub fn has_enabled_features(&self) -> bool {
        self.enabled_features.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enabled_features(&mut self, v: u32) {
        self.enabled_features = ::std::option::Option::Some(v);
    }

    // optional string recovery_email = 11;

    pub fn recovery_email(&self) -> &str {
        match self.recovery_email.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_recovery_email(&mut self) {
        self.recovery_email = ::std::option::Option::None;
    }

    pub fn has_recovery_email(&self) -> bool {
        self.recovery_email.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recovery_email(&mut self, v: ::std::string::String) {
        self.recovery_email = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recovery_email(&mut self) -> &mut ::std::string::String {
        if self.recovery_email.is_none() {
            self.recovery_email = ::std::option::Option::Some(::std::string::String::new());
        }
        self.recovery_email.as_mut().unwrap()
    }

    // Take field
    pub fn take_recovery_email(&mut self) -> ::std::string::String {
        self.recovery_email.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_site_license_lock = 12;

    pub fn is_site_license_lock(&self) -> bool {
        self.is_site_license_lock.unwrap_or(false)
    }

    pub fn clear_is_site_license_lock(&mut self) {
        self.is_site_license_lock = ::std::option::Option::None;
    }

    pub fn has_is_site_license_lock(&self) -> bool {
        self.is_site_license_lock.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_site_license_lock(&mut self, v: bool) {
        self.is_site_license_lock = ::std::option::Option::Some(v);
    }

    // optional uint32 temporary_enabled_features = 13;

    pub fn temporary_enabled_features(&self) -> u32 {
        self.temporary_enabled_features.unwrap_or(0)
    }

    pub fn clear_temporary_enabled_features(&mut self) {
        self.temporary_enabled_features = ::std::option::Option::None;
    }

    pub fn has_temporary_enabled_features(&self) -> bool {
        self.temporary_enabled_features.is_some()
    }

    // Param is passed by value, moved
    pub fn set_temporary_enabled_features(&mut self, v: u32) {
        self.temporary_enabled_features = ::std::option::Option::Some(v);
    }

    // optional uint32 rtime_temporary_feature_expiration = 14;

    pub fn rtime_temporary_feature_expiration(&self) -> u32 {
        self.rtime_temporary_feature_expiration.unwrap_or(0)
    }

    pub fn clear_rtime_temporary_feature_expiration(&mut self) {
        self.rtime_temporary_feature_expiration = ::std::option::Option::None;
    }

    pub fn has_rtime_temporary_feature_expiration(&self) -> bool {
        self.rtime_temporary_feature_expiration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rtime_temporary_feature_expiration(&mut self, v: u32) {
        self.rtime_temporary_feature_expiration = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for ParentalSettings {
    const NAME: &'static str = "ParentalSettings";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                16 => {
                    self.applist_base_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                26 => {
                    self.applist_base_description = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.applist_base.push(is.read_message()?);
                },
                42 => {
                    self.applist_custom.push(is.read_message()?);
                },
                48 => {
                    self.passwordhashtype = ::std::option::Option::Some(is.read_uint32()?);
                },
                58 => {
                    self.salt = ::std::option::Option::Some(is.read_bytes()?);
                },
                66 => {
                    self.passwordhash = ::std::option::Option::Some(is.read_bytes()?);
                },
                72 => {
                    self.is_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                80 => {
                    self.enabled_features = ::std::option::Option::Some(is.read_uint32()?);
                },
                90 => {
                    self.recovery_email = ::std::option::Option::Some(is.read_string()?);
                },
                96 => {
                    self.is_site_license_lock = ::std::option::Option::Some(is.read_bool()?);
                },
                104 => {
                    self.temporary_enabled_features = ::std::option::Option::Some(is.read_uint32()?);
                },
                112 => {
                    self.rtime_temporary_feature_expiration = ::std::option::Option::Some(is.read_uint32()?);
                },
                122 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.playtime_restrictions)?;
                },
                130 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.temporary_playtime_restrictions)?;
                },
                138 => {
                    is.read_repeated_packed_uint32_into(&mut self.excluded_store_content_descriptors)?;
                },
                136 => {
                    self.excluded_store_content_descriptors.push(is.read_uint32()?);
                },
                146 => {
                    is.read_repeated_packed_uint32_into(&mut self.excluded_community_content_descriptors)?;
                },
                144 => {
                    self.excluded_community_content_descriptors.push(is.read_uint32()?);
                },
                154 => {
                    is.read_repeated_packed_uint32_into(&mut self.utility_appids)?;
                },
                152 => {
                    self.utility_appids.push(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.applist_base_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.applist_base_description.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        for value in &self.applist_base {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.applist_custom {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.passwordhashtype {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.salt.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(7, &v);
        }
        if let Some(v) = self.passwordhash.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::bytes_size(8, &v);
        }
        if let Some(v) = self.is_enabled {
            my_size += 1 + 1;
        }
        if let Some(v) = self.enabled_features {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(10, v);
        }
        if let Some(v) = self.recovery_email.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(11, &v);
        }
        if let Some(v) = self.is_site_license_lock {
            my_size += 1 + 1;
        }
        if let Some(v) = self.temporary_enabled_features {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(13, v);
        }
        if let Some(v) = self.rtime_temporary_feature_expiration {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(14, v);
        }
        if let Some(v) = self.playtime_restrictions.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.temporary_playtime_restrictions.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.excluded_store_content_descriptors {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(17, *value);
        };
        for value in &self.excluded_community_content_descriptors {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(18, *value);
        };
        for value in &self.utility_appids {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(19, *value);
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.steamid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.applist_base_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.applist_base_description.as_ref() {
            os.write_string(3, v)?;
        }
        for v in &self.applist_base {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.applist_custom {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if let Some(v) = self.passwordhashtype {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.salt.as_ref() {
            os.write_bytes(7, v)?;
        }
        if let Some(v) = self.passwordhash.as_ref() {
            os.write_bytes(8, v)?;
        }
        if let Some(v) = self.is_enabled {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.enabled_features {
            os.write_uint32(10, v)?;
        }
        if let Some(v) = self.recovery_email.as_ref() {
            os.write_string(11, v)?;
        }
        if let Some(v) = self.is_site_license_lock {
            os.write_bool(12, v)?;
        }
        if let Some(v) = self.temporary_enabled_features {
            os.write_uint32(13, v)?;
        }
        if let Some(v) = self.rtime_temporary_feature_expiration {
            os.write_uint32(14, v)?;
        }
        if let Some(v) = self.playtime_restrictions.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        }
        if let Some(v) = self.temporary_playtime_restrictions.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(16, v, os)?;
        }
        for v in &self.excluded_store_content_descriptors {
            os.write_uint32(17, *v)?;
        };
        for v in &self.excluded_community_content_descriptors {
            os.write_uint32(18, *v)?;
        };
        for v in &self.utility_appids {
            os.write_uint32(19, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ParentalSettings {
        ParentalSettings::new()
    }

    fn clear(&mut self) {
        self.steamid = ::std::option::Option::None;
        self.applist_base_id = ::std::option::Option::None;
        self.applist_base_description = ::std::option::Option::None;
        self.applist_base.clear();
        self.applist_custom.clear();
        self.passwordhashtype = ::std::option::Option::None;
        self.salt = ::std::option::Option::None;
        self.passwordhash = ::std::option::Option::None;
        self.is_enabled = ::std::option::Option::None;
        self.enabled_features = ::std::option::Option::None;
        self.recovery_email = ::std::option::Option::None;
        self.is_site_license_lock = ::std::option::Option::None;
        self.temporary_enabled_features = ::std::option::Option::None;
        self.rtime_temporary_feature_expiration = ::std::option::Option::None;
        self.playtime_restrictions.clear();
        self.temporary_playtime_restrictions.clear();
        self.excluded_store_content_descriptors.clear();
        self.excluded_community_content_descriptors.clear();
        self.utility_appids.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ParentalSettings {
        static instance: ParentalSettings = ParentalSettings {
            steamid: ::std::option::Option::None,
            applist_base_id: ::std::option::Option::None,
            applist_base_description: ::std::option::Option::None,
            applist_base: ::std::vec::Vec::new(),
            applist_custom: ::std::vec::Vec::new(),
            passwordhashtype: ::std::option::Option::None,
            salt: ::std::option::Option::None,
            passwordhash: ::std::option::Option::None,
            is_enabled: ::std::option::Option::None,
            enabled_features: ::std::option::Option::None,
            recovery_email: ::std::option::Option::None,
            is_site_license_lock: ::std::option::Option::None,
            temporary_enabled_features: ::std::option::Option::None,
            rtime_temporary_feature_expiration: ::std::option::Option::None,
            playtime_restrictions: ::steam_vent_proto_common::protobuf::MessageField::none(),
            temporary_playtime_restrictions: ::steam_vent_proto_common::protobuf::MessageField::none(),
            excluded_store_content_descriptors: ::std::vec::Vec::new(),
            excluded_community_content_descriptors: ::std::vec::Vec::new(),
            utility_appids: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:ParentalFeatureRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ParentalFeatureRequest {
    // message fields
    // @@protoc_insertion_point(field:ParentalFeatureRequest.requestid)
    pub requestid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalFeatureRequest.family_groupid)
    pub family_groupid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalFeatureRequest.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalFeatureRequest.features)
    pub features: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalFeatureRequest.time_requested)
    pub time_requested: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalFeatureRequest.approved)
    pub approved: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:ParentalFeatureRequest.steamid_responder)
    pub steamid_responder: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalFeatureRequest.time_responded)
    pub time_responded: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:ParentalFeatureRequest.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ParentalFeatureRequest {
    fn default() -> &'a ParentalFeatureRequest {
        <ParentalFeatureRequest as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl ParentalFeatureRequest {
    pub fn new() -> ParentalFeatureRequest {
        ::std::default::Default::default()
    }

    // optional fixed64 requestid = 1;

    pub fn requestid(&self) -> u64 {
        self.requestid.unwrap_or(0)
    }

    pub fn clear_requestid(&mut self) {
        self.requestid = ::std::option::Option::None;
    }

    pub fn has_requestid(&self) -> bool {
        self.requestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requestid(&mut self, v: u64) {
        self.requestid = ::std::option::Option::Some(v);
    }

    // optional fixed64 family_groupid = 2;

    pub fn family_groupid(&self) -> u64 {
        self.family_groupid.unwrap_or(0)
    }

    pub fn clear_family_groupid(&mut self) {
        self.family_groupid = ::std::option::Option::None;
    }

    pub fn has_family_groupid(&self) -> bool {
        self.family_groupid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_family_groupid(&mut self, v: u64) {
        self.family_groupid = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 3;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 features = 4;

    pub fn features(&self) -> u32 {
        self.features.unwrap_or(0)
    }

    pub fn clear_features(&mut self) {
        self.features = ::std::option::Option::None;
    }

    pub fn has_features(&self) -> bool {
        self.features.is_some()
    }

    // Param is passed by value, moved
    pub fn set_features(&mut self, v: u32) {
        self.features = ::std::option::Option::Some(v);
    }

    // optional uint32 time_requested = 5;

    pub fn time_requested(&self) -> u32 {
        self.time_requested.unwrap_or(0)
    }

    pub fn clear_time_requested(&mut self) {
        self.time_requested = ::std::option::Option::None;
    }

    pub fn has_time_requested(&self) -> bool {
        self.time_requested.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_requested(&mut self, v: u32) {
        self.time_requested = ::std::option::Option::Some(v);
    }

    // optional bool approved = 6;

    pub fn approved(&self) -> bool {
        self.approved.unwrap_or(false)
    }

    pub fn clear_approved(&mut self) {
        self.approved = ::std::option::Option::None;
    }

    pub fn has_approved(&self) -> bool {
        self.approved.is_some()
    }

    // Param is passed by value, moved
    pub fn set_approved(&mut self, v: bool) {
        self.approved = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid_responder = 7;

    pub fn steamid_responder(&self) -> u64 {
        self.steamid_responder.unwrap_or(0)
    }

    pub fn clear_steamid_responder(&mut self) {
        self.steamid_responder = ::std::option::Option::None;
    }

    pub fn has_steamid_responder(&self) -> bool {
        self.steamid_responder.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_responder(&mut self, v: u64) {
        self.steamid_responder = ::std::option::Option::Some(v);
    }

    // optional uint32 time_responded = 8;

    pub fn time_responded(&self) -> u32 {
        self.time_responded.unwrap_or(0)
    }

    pub fn clear_time_responded(&mut self) {
        self.time_responded = ::std::option::Option::None;
    }

    pub fn has_time_responded(&self) -> bool {
        self.time_responded.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_responded(&mut self, v: u32) {
        self.time_responded = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for ParentalFeatureRequest {
    const NAME: &'static str = "ParentalFeatureRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.requestid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.family_groupid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                25 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                32 => {
                    self.features = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.time_requested = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.approved = ::std::option::Option::Some(is.read_bool()?);
                },
                57 => {
                    self.steamid_responder = ::std::option::Option::Some(is.read_fixed64()?);
                },
                64 => {
                    self.time_responded = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.requestid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.family_groupid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.features {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.time_requested {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.approved {
            my_size += 1 + 1;
        }
        if let Some(v) = self.steamid_responder {
            my_size += 1 + 8;
        }
        if let Some(v) = self.time_responded {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(8, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.requestid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.family_groupid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.features {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.time_requested {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.approved {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.steamid_responder {
            os.write_fixed64(7, v)?;
        }
        if let Some(v) = self.time_responded {
            os.write_uint32(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ParentalFeatureRequest {
        ParentalFeatureRequest::new()
    }

    fn clear(&mut self) {
        self.requestid = ::std::option::Option::None;
        self.family_groupid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.features = ::std::option::Option::None;
        self.time_requested = ::std::option::Option::None;
        self.approved = ::std::option::Option::None;
        self.steamid_responder = ::std::option::Option::None;
        self.time_responded = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ParentalFeatureRequest {
        static instance: ParentalFeatureRequest = ParentalFeatureRequest {
            requestid: ::std::option::Option::None,
            family_groupid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            features: ::std::option::Option::None,
            time_requested: ::std::option::Option::None,
            approved: ::std::option::Option::None,
            steamid_responder: ::std::option::Option::None,
            time_responded: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:ParentalPlaytimeRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ParentalPlaytimeRequest {
    // message fields
    // @@protoc_insertion_point(field:ParentalPlaytimeRequest.requestid)
    pub requestid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalPlaytimeRequest.family_groupid)
    pub family_groupid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalPlaytimeRequest.steamid)
    pub steamid: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalPlaytimeRequest.current_playtime_restrictions)
    pub current_playtime_restrictions: ::steam_vent_proto_common::protobuf::MessageField<ParentalPlaytimeDay>,
    // @@protoc_insertion_point(field:ParentalPlaytimeRequest.time_expires)
    pub time_expires: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalPlaytimeRequest.time_requested)
    pub time_requested: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalPlaytimeRequest.approved)
    pub approved: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:ParentalPlaytimeRequest.steamid_responder)
    pub steamid_responder: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:ParentalPlaytimeRequest.time_responded)
    pub time_responded: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:ParentalPlaytimeRequest.restrictions_approved)
    pub restrictions_approved: ::steam_vent_proto_common::protobuf::MessageField<ParentalTemporaryPlaytimeRestrictions>,
    // special fields
    // @@protoc_insertion_point(special_field:ParentalPlaytimeRequest.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ParentalPlaytimeRequest {
    fn default() -> &'a ParentalPlaytimeRequest {
        <ParentalPlaytimeRequest as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl ParentalPlaytimeRequest {
    pub fn new() -> ParentalPlaytimeRequest {
        ::std::default::Default::default()
    }

    // optional fixed64 requestid = 1;

    pub fn requestid(&self) -> u64 {
        self.requestid.unwrap_or(0)
    }

    pub fn clear_requestid(&mut self) {
        self.requestid = ::std::option::Option::None;
    }

    pub fn has_requestid(&self) -> bool {
        self.requestid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_requestid(&mut self, v: u64) {
        self.requestid = ::std::option::Option::Some(v);
    }

    // optional fixed64 family_groupid = 2;

    pub fn family_groupid(&self) -> u64 {
        self.family_groupid.unwrap_or(0)
    }

    pub fn clear_family_groupid(&mut self) {
        self.family_groupid = ::std::option::Option::None;
    }

    pub fn has_family_groupid(&self) -> bool {
        self.family_groupid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_family_groupid(&mut self, v: u64) {
        self.family_groupid = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid = 3;

    pub fn steamid(&self) -> u64 {
        self.steamid.unwrap_or(0)
    }

    pub fn clear_steamid(&mut self) {
        self.steamid = ::std::option::Option::None;
    }

    pub fn has_steamid(&self) -> bool {
        self.steamid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid(&mut self, v: u64) {
        self.steamid = ::std::option::Option::Some(v);
    }

    // optional uint32 time_expires = 5;

    pub fn time_expires(&self) -> u32 {
        self.time_expires.unwrap_or(0)
    }

    pub fn clear_time_expires(&mut self) {
        self.time_expires = ::std::option::Option::None;
    }

    pub fn has_time_expires(&self) -> bool {
        self.time_expires.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_expires(&mut self, v: u32) {
        self.time_expires = ::std::option::Option::Some(v);
    }

    // optional uint32 time_requested = 6;

    pub fn time_requested(&self) -> u32 {
        self.time_requested.unwrap_or(0)
    }

    pub fn clear_time_requested(&mut self) {
        self.time_requested = ::std::option::Option::None;
    }

    pub fn has_time_requested(&self) -> bool {
        self.time_requested.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_requested(&mut self, v: u32) {
        self.time_requested = ::std::option::Option::Some(v);
    }

    // optional bool approved = 7;

    pub fn approved(&self) -> bool {
        self.approved.unwrap_or(false)
    }

    pub fn clear_approved(&mut self) {
        self.approved = ::std::option::Option::None;
    }

    pub fn has_approved(&self) -> bool {
        self.approved.is_some()
    }

    // Param is passed by value, moved
    pub fn set_approved(&mut self, v: bool) {
        self.approved = ::std::option::Option::Some(v);
    }

    // optional fixed64 steamid_responder = 8;

    pub fn steamid_responder(&self) -> u64 {
        self.steamid_responder.unwrap_or(0)
    }

    pub fn clear_steamid_responder(&mut self) {
        self.steamid_responder = ::std::option::Option::None;
    }

    pub fn has_steamid_responder(&self) -> bool {
        self.steamid_responder.is_some()
    }

    // Param is passed by value, moved
    pub fn set_steamid_responder(&mut self, v: u64) {
        self.steamid_responder = ::std::option::Option::Some(v);
    }

    // optional uint32 time_responded = 9;

    pub fn time_responded(&self) -> u32 {
        self.time_responded.unwrap_or(0)
    }

    pub fn clear_time_responded(&mut self) {
        self.time_responded = ::std::option::Option::None;
    }

    pub fn has_time_responded(&self) -> bool {
        self.time_responded.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_responded(&mut self, v: u32) {
        self.time_responded = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for ParentalPlaytimeRequest {
    const NAME: &'static str = "ParentalPlaytimeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.requestid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                17 => {
                    self.family_groupid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                25 => {
                    self.steamid = ::std::option::Option::Some(is.read_fixed64()?);
                },
                34 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.current_playtime_restrictions)?;
                },
                40 => {
                    self.time_expires = ::std::option::Option::Some(is.read_uint32()?);
                },
                48 => {
                    self.time_requested = ::std::option::Option::Some(is.read_uint32()?);
                },
                56 => {
                    self.approved = ::std::option::Option::Some(is.read_bool()?);
                },
                65 => {
                    self.steamid_responder = ::std::option::Option::Some(is.read_fixed64()?);
                },
                72 => {
                    self.time_responded = ::std::option::Option::Some(is.read_uint32()?);
                },
                82 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.restrictions_approved)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.requestid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.family_groupid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.steamid {
            my_size += 1 + 8;
        }
        if let Some(v) = self.current_playtime_restrictions.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.time_expires {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(5, v);
        }
        if let Some(v) = self.time_requested {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(6, v);
        }
        if let Some(v) = self.approved {
            my_size += 1 + 1;
        }
        if let Some(v) = self.steamid_responder {
            my_size += 1 + 8;
        }
        if let Some(v) = self.time_responded {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(9, v);
        }
        if let Some(v) = self.restrictions_approved.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.requestid {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.family_groupid {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.steamid {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.current_playtime_restrictions.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.time_expires {
            os.write_uint32(5, v)?;
        }
        if let Some(v) = self.time_requested {
            os.write_uint32(6, v)?;
        }
        if let Some(v) = self.approved {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.steamid_responder {
            os.write_fixed64(8, v)?;
        }
        if let Some(v) = self.time_responded {
            os.write_uint32(9, v)?;
        }
        if let Some(v) = self.restrictions_approved.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ParentalPlaytimeRequest {
        ParentalPlaytimeRequest::new()
    }

    fn clear(&mut self) {
        self.requestid = ::std::option::Option::None;
        self.family_groupid = ::std::option::Option::None;
        self.steamid = ::std::option::Option::None;
        self.current_playtime_restrictions.clear();
        self.time_expires = ::std::option::Option::None;
        self.time_requested = ::std::option::Option::None;
        self.approved = ::std::option::Option::None;
        self.steamid_responder = ::std::option::Option::None;
        self.time_responded = ::std::option::Option::None;
        self.restrictions_approved.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ParentalPlaytimeRequest {
        static instance: ParentalPlaytimeRequest = ParentalPlaytimeRequest {
            requestid: ::std::option::Option::None,
            family_groupid: ::std::option::Option::None,
            steamid: ::std::option::Option::None,
            current_playtime_restrictions: ::steam_vent_proto_common::protobuf::MessageField::none(),
            time_expires: ::std::option::Option::None,
            time_requested: ::std::option::Option::None,
            approved: ::std::option::Option::None,
            steamid_responder: ::std::option::Option::None,
            time_responded: ::std::option::Option::None,
            restrictions_approved: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}


const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::steammessages_base::*;
#[allow(unused_imports)]
use crate::enums::*;
impl ::steam_vent_proto_common::RpcMessage for ParentalApp {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for ParentalPlaytimeDay {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for ParentalPlaytimeRestrictions {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for ParentalTemporaryPlaytimeRestrictions {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for ParentalSettings {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for ParentalFeatureRequest {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for ParentalPlaytimeRequest {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
