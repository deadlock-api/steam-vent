// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `webuimessages_bluetooth.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:CBluetoothManager_GetState_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_GetState_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_GetState_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_GetState_Request {
    fn default() -> &'a CBluetoothManager_GetState_Request {
        <CBluetoothManager_GetState_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_GetState_Request {
    pub fn new() -> CBluetoothManager_GetState_Request {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_GetState_Request {
    const NAME: &'static str = "CBluetoothManager_GetState_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_GetState_Request {
        CBluetoothManager_GetState_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_GetState_Request {
        static instance: CBluetoothManager_GetState_Request = CBluetoothManager_GetState_Request {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgBluetoothManagerAdapterInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgBluetoothManagerAdapterInfo {
    // message fields
    // @@protoc_insertion_point(field:CMsgBluetoothManagerAdapterInfo.id)
    pub id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgBluetoothManagerAdapterInfo.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgBluetoothManagerAdapterInfo {
    fn default() -> &'a CMsgBluetoothManagerAdapterInfo {
        <CMsgBluetoothManagerAdapterInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgBluetoothManagerAdapterInfo {
    pub fn new() -> CMsgBluetoothManagerAdapterInfo {
        ::std::default::Default::default()
    }

    // optional uint32 id = 1;

    pub fn id(&self) -> u32 {
        self.id.unwrap_or(0)
    }

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgBluetoothManagerAdapterInfo {
    const NAME: &'static str = "CMsgBluetoothManagerAdapterInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgBluetoothManagerAdapterInfo {
        CMsgBluetoothManagerAdapterInfo::new()
    }

    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgBluetoothManagerAdapterInfo {
        static instance: CMsgBluetoothManagerAdapterInfo = CMsgBluetoothManagerAdapterInfo {
            id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgBluetoothManagerDeviceInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgBluetoothManagerDeviceInfo {
    // message fields
    // @@protoc_insertion_point(field:CMsgBluetoothManagerDeviceInfo.id)
    pub id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgBluetoothManagerDeviceInfo.should_hide_hint)
    pub should_hide_hint: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgBluetoothManagerDeviceInfo.etype)
    pub etype: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::enums::EBluetoothDeviceType>>,
    // @@protoc_insertion_point(field:CMsgBluetoothManagerDeviceInfo.is_connected)
    pub is_connected: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgBluetoothManagerDeviceInfo.is_paired)
    pub is_paired: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgBluetoothManagerDeviceInfo.strength_raw)
    pub strength_raw: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgBluetoothManagerDeviceInfo.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgBluetoothManagerDeviceInfo {
    fn default() -> &'a CMsgBluetoothManagerDeviceInfo {
        <CMsgBluetoothManagerDeviceInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgBluetoothManagerDeviceInfo {
    pub fn new() -> CMsgBluetoothManagerDeviceInfo {
        ::std::default::Default::default()
    }

    // optional uint32 id = 1;

    pub fn id(&self) -> u32 {
        self.id.unwrap_or(0)
    }

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = ::std::option::Option::Some(v);
    }

    // optional bool should_hide_hint = 2;

    pub fn should_hide_hint(&self) -> bool {
        self.should_hide_hint.unwrap_or(false)
    }

    pub fn clear_should_hide_hint(&mut self) {
        self.should_hide_hint = ::std::option::Option::None;
    }

    pub fn has_should_hide_hint(&self) -> bool {
        self.should_hide_hint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_should_hide_hint(&mut self, v: bool) {
        self.should_hide_hint = ::std::option::Option::Some(v);
    }

    // optional .EBluetoothDeviceType etype = 3;

    pub fn etype(&self) -> super::enums::EBluetoothDeviceType {
        match self.etype {
            Some(e) => e.enum_value_or(super::enums::EBluetoothDeviceType::k_BluetoothDeviceType_Invalid),
            None => super::enums::EBluetoothDeviceType::k_BluetoothDeviceType_Invalid,
        }
    }

    pub fn clear_etype(&mut self) {
        self.etype = ::std::option::Option::None;
    }

    pub fn has_etype(&self) -> bool {
        self.etype.is_some()
    }

    // Param is passed by value, moved
    pub fn set_etype(&mut self, v: super::enums::EBluetoothDeviceType) {
        self.etype = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional bool is_connected = 4;

    pub fn is_connected(&self) -> bool {
        self.is_connected.unwrap_or(false)
    }

    pub fn clear_is_connected(&mut self) {
        self.is_connected = ::std::option::Option::None;
    }

    pub fn has_is_connected(&self) -> bool {
        self.is_connected.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_connected(&mut self, v: bool) {
        self.is_connected = ::std::option::Option::Some(v);
    }

    // optional bool is_paired = 5;

    pub fn is_paired(&self) -> bool {
        self.is_paired.unwrap_or(false)
    }

    pub fn clear_is_paired(&mut self) {
        self.is_paired = ::std::option::Option::None;
    }

    pub fn has_is_paired(&self) -> bool {
        self.is_paired.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_paired(&mut self, v: bool) {
        self.is_paired = ::std::option::Option::Some(v);
    }

    // optional int32 strength_raw = 6;

    pub fn strength_raw(&self) -> i32 {
        self.strength_raw.unwrap_or(0)
    }

    pub fn clear_strength_raw(&mut self) {
        self.strength_raw = ::std::option::Option::None;
    }

    pub fn has_strength_raw(&self) -> bool {
        self.strength_raw.is_some()
    }

    // Param is passed by value, moved
    pub fn set_strength_raw(&mut self, v: i32) {
        self.strength_raw = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgBluetoothManagerDeviceInfo {
    const NAME: &'static str = "CMsgBluetoothManagerDeviceInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.should_hide_hint = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.etype = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                32 => {
                    self.is_connected = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.is_paired = ::std::option::Option::Some(is.read_bool()?);
                },
                48 => {
                    self.strength_raw = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.should_hide_hint {
            my_size += 1 + 1;
        }
        if let Some(v) = self.etype {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.is_connected {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_paired {
            my_size += 1 + 1;
        }
        if let Some(v) = self.strength_raw {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(6, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.should_hide_hint {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.etype {
            os.write_enum(3, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.is_connected {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.is_paired {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.strength_raw {
            os.write_int32(6, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgBluetoothManagerDeviceInfo {
        CMsgBluetoothManagerDeviceInfo::new()
    }

    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.should_hide_hint = ::std::option::Option::None;
        self.etype = ::std::option::Option::None;
        self.is_connected = ::std::option::Option::None;
        self.is_paired = ::std::option::Option::None;
        self.strength_raw = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgBluetoothManagerDeviceInfo {
        static instance: CMsgBluetoothManagerDeviceInfo = CMsgBluetoothManagerDeviceInfo {
            id: ::std::option::Option::None,
            should_hide_hint: ::std::option::Option::None,
            etype: ::std::option::Option::None,
            is_connected: ::std::option::Option::None,
            is_paired: ::std::option::Option::None,
            strength_raw: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CBluetoothManager_GetState_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_GetState_Response {
    // message fields
    // @@protoc_insertion_point(field:CBluetoothManager_GetState_Response.is_service_available)
    pub is_service_available: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CBluetoothManager_GetState_Response.is_enabled)
    pub is_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CBluetoothManager_GetState_Response.is_discovering)
    pub is_discovering: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CBluetoothManager_GetState_Response.adapters)
    pub adapters: ::std::vec::Vec<CMsgBluetoothManagerAdapterInfo>,
    // @@protoc_insertion_point(field:CBluetoothManager_GetState_Response.devices)
    pub devices: ::std::vec::Vec<CMsgBluetoothManagerDeviceInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_GetState_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_GetState_Response {
    fn default() -> &'a CBluetoothManager_GetState_Response {
        <CBluetoothManager_GetState_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_GetState_Response {
    pub fn new() -> CBluetoothManager_GetState_Response {
        ::std::default::Default::default()
    }

    // optional bool is_service_available = 1;

    pub fn is_service_available(&self) -> bool {
        self.is_service_available.unwrap_or(false)
    }

    pub fn clear_is_service_available(&mut self) {
        self.is_service_available = ::std::option::Option::None;
    }

    pub fn has_is_service_available(&self) -> bool {
        self.is_service_available.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_service_available(&mut self, v: bool) {
        self.is_service_available = ::std::option::Option::Some(v);
    }

    // optional bool is_enabled = 2;

    pub fn is_enabled(&self) -> bool {
        self.is_enabled.unwrap_or(false)
    }

    pub fn clear_is_enabled(&mut self) {
        self.is_enabled = ::std::option::Option::None;
    }

    pub fn has_is_enabled(&self) -> bool {
        self.is_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_enabled(&mut self, v: bool) {
        self.is_enabled = ::std::option::Option::Some(v);
    }

    // optional bool is_discovering = 3;

    pub fn is_discovering(&self) -> bool {
        self.is_discovering.unwrap_or(false)
    }

    pub fn clear_is_discovering(&mut self) {
        self.is_discovering = ::std::option::Option::None;
    }

    pub fn has_is_discovering(&self) -> bool {
        self.is_discovering.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_discovering(&mut self, v: bool) {
        self.is_discovering = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_GetState_Response {
    const NAME: &'static str = "CBluetoothManager_GetState_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.is_service_available = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.is_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.is_discovering = ::std::option::Option::Some(is.read_bool()?);
                },
                34 => {
                    self.adapters.push(is.read_message()?);
                },
                42 => {
                    self.devices.push(is.read_message()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.is_service_available {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_enabled {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_discovering {
            my_size += 1 + 1;
        }
        for value in &self.adapters {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.devices {
            let len = value.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.is_service_available {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.is_enabled {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.is_discovering {
            os.write_bool(3, v)?;
        }
        for v in &self.adapters {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        for v in &self.devices {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_GetState_Response {
        CBluetoothManager_GetState_Response::new()
    }

    fn clear(&mut self) {
        self.is_service_available = ::std::option::Option::None;
        self.is_enabled = ::std::option::Option::None;
        self.is_discovering = ::std::option::Option::None;
        self.adapters.clear();
        self.devices.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_GetState_Response {
        static instance: CBluetoothManager_GetState_Response = CBluetoothManager_GetState_Response {
            is_service_available: ::std::option::Option::None,
            is_enabled: ::std::option::Option::None,
            is_discovering: ::std::option::Option::None,
            adapters: ::std::vec::Vec::new(),
            devices: ::std::vec::Vec::new(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CBluetoothManager_GetAdapterDetails_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_GetAdapterDetails_Request {
    // message fields
    // @@protoc_insertion_point(field:CBluetoothManager_GetAdapterDetails_Request.id)
    pub id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_GetAdapterDetails_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_GetAdapterDetails_Request {
    fn default() -> &'a CBluetoothManager_GetAdapterDetails_Request {
        <CBluetoothManager_GetAdapterDetails_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_GetAdapterDetails_Request {
    pub fn new() -> CBluetoothManager_GetAdapterDetails_Request {
        ::std::default::Default::default()
    }

    // optional uint32 id = 1;

    pub fn id(&self) -> u32 {
        self.id.unwrap_or(0)
    }

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_GetAdapterDetails_Request {
    const NAME: &'static str = "CBluetoothManager_GetAdapterDetails_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_GetAdapterDetails_Request {
        CBluetoothManager_GetAdapterDetails_Request::new()
    }

    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_GetAdapterDetails_Request {
        static instance: CBluetoothManager_GetAdapterDetails_Request = CBluetoothManager_GetAdapterDetails_Request {
            id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgBluetoothManagerAdapterDetails)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgBluetoothManagerAdapterDetails {
    // message fields
    // @@protoc_insertion_point(field:CMsgBluetoothManagerAdapterDetails.id)
    pub id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgBluetoothManagerAdapterDetails.mac)
    pub mac: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgBluetoothManagerAdapterDetails.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgBluetoothManagerAdapterDetails.is_enabled)
    pub is_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgBluetoothManagerAdapterDetails.is_discovering)
    pub is_discovering: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgBluetoothManagerAdapterDetails.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgBluetoothManagerAdapterDetails {
    fn default() -> &'a CMsgBluetoothManagerAdapterDetails {
        <CMsgBluetoothManagerAdapterDetails as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgBluetoothManagerAdapterDetails {
    pub fn new() -> CMsgBluetoothManagerAdapterDetails {
        ::std::default::Default::default()
    }

    // optional uint32 id = 1;

    pub fn id(&self) -> u32 {
        self.id.unwrap_or(0u32)
    }

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = ::std::option::Option::Some(v);
    }

    // optional string mac = 2;

    pub fn mac(&self) -> &str {
        match self.mac.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_mac(&mut self) {
        self.mac = ::std::option::Option::None;
    }

    pub fn has_mac(&self) -> bool {
        self.mac.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mac(&mut self, v: ::std::string::String) {
        self.mac = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mac(&mut self) -> &mut ::std::string::String {
        if self.mac.is_none() {
            self.mac = ::std::option::Option::Some(::std::string::String::new());
        }
        self.mac.as_mut().unwrap()
    }

    // Take field
    pub fn take_mac(&mut self) -> ::std::string::String {
        self.mac.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string name = 3;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_enabled = 4;

    pub fn is_enabled(&self) -> bool {
        self.is_enabled.unwrap_or(false)
    }

    pub fn clear_is_enabled(&mut self) {
        self.is_enabled = ::std::option::Option::None;
    }

    pub fn has_is_enabled(&self) -> bool {
        self.is_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_enabled(&mut self, v: bool) {
        self.is_enabled = ::std::option::Option::Some(v);
    }

    // optional bool is_discovering = 5;

    pub fn is_discovering(&self) -> bool {
        self.is_discovering.unwrap_or(false)
    }

    pub fn clear_is_discovering(&mut self) {
        self.is_discovering = ::std::option::Option::None;
    }

    pub fn has_is_discovering(&self) -> bool {
        self.is_discovering.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_discovering(&mut self, v: bool) {
        self.is_discovering = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgBluetoothManagerAdapterDetails {
    const NAME: &'static str = "CMsgBluetoothManagerAdapterDetails";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.mac = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                32 => {
                    self.is_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                40 => {
                    self.is_discovering = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.mac.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.is_enabled {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_discovering {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.mac.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.is_enabled {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.is_discovering {
            os.write_bool(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgBluetoothManagerAdapterDetails {
        CMsgBluetoothManagerAdapterDetails::new()
    }

    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.mac = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.is_enabled = ::std::option::Option::None;
        self.is_discovering = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgBluetoothManagerAdapterDetails {
        static instance: CMsgBluetoothManagerAdapterDetails = CMsgBluetoothManagerAdapterDetails {
            id: ::std::option::Option::None,
            mac: ::std::option::Option::None,
            name: ::std::option::Option::None,
            is_enabled: ::std::option::Option::None,
            is_discovering: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CBluetoothManager_GetAdapterDetails_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_GetAdapterDetails_Response {
    // message fields
    // @@protoc_insertion_point(field:CBluetoothManager_GetAdapterDetails_Response.adapter)
    pub adapter: ::steam_vent_proto_common::protobuf::MessageField<CMsgBluetoothManagerAdapterDetails>,
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_GetAdapterDetails_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_GetAdapterDetails_Response {
    fn default() -> &'a CBluetoothManager_GetAdapterDetails_Response {
        <CBluetoothManager_GetAdapterDetails_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_GetAdapterDetails_Response {
    pub fn new() -> CBluetoothManager_GetAdapterDetails_Response {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_GetAdapterDetails_Response {
    const NAME: &'static str = "CBluetoothManager_GetAdapterDetails_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.adapter)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.adapter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.adapter.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_GetAdapterDetails_Response {
        CBluetoothManager_GetAdapterDetails_Response::new()
    }

    fn clear(&mut self) {
        self.adapter.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_GetAdapterDetails_Response {
        static instance: CBluetoothManager_GetAdapterDetails_Response = CBluetoothManager_GetAdapterDetails_Response {
            adapter: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CBluetoothManager_GetDeviceDetails_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_GetDeviceDetails_Request {
    // message fields
    // @@protoc_insertion_point(field:CBluetoothManager_GetDeviceDetails_Request.id)
    pub id: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_GetDeviceDetails_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_GetDeviceDetails_Request {
    fn default() -> &'a CBluetoothManager_GetDeviceDetails_Request {
        <CBluetoothManager_GetDeviceDetails_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_GetDeviceDetails_Request {
    pub fn new() -> CBluetoothManager_GetDeviceDetails_Request {
        ::std::default::Default::default()
    }

    // optional uint32 id = 1;

    pub fn id(&self) -> u32 {
        self.id.unwrap_or(0)
    }

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_GetDeviceDetails_Request {
    const NAME: &'static str = "CBluetoothManager_GetDeviceDetails_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_GetDeviceDetails_Request {
        CBluetoothManager_GetDeviceDetails_Request::new()
    }

    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_GetDeviceDetails_Request {
        static instance: CBluetoothManager_GetDeviceDetails_Request = CBluetoothManager_GetDeviceDetails_Request {
            id: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgBluetoothManagerDeviceDetails)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgBluetoothManagerDeviceDetails {
    // message fields
    // @@protoc_insertion_point(field:CMsgBluetoothManagerDeviceDetails.id)
    pub id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgBluetoothManagerDeviceDetails.adapter_id)
    pub adapter_id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CMsgBluetoothManagerDeviceDetails.etype)
    pub etype: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::enums::EBluetoothDeviceType>>,
    // @@protoc_insertion_point(field:CMsgBluetoothManagerDeviceDetails.mac)
    pub mac: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgBluetoothManagerDeviceDetails.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgBluetoothManagerDeviceDetails.is_connected)
    pub is_connected: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgBluetoothManagerDeviceDetails.is_paired)
    pub is_paired: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgBluetoothManagerDeviceDetails.is_pairing)
    pub is_pairing: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgBluetoothManagerDeviceDetails.wake_allowed)
    pub wake_allowed: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgBluetoothManagerDeviceDetails.wake_allowed_supported)
    pub wake_allowed_supported: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgBluetoothManagerDeviceDetails.battery_percent)
    pub battery_percent: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CMsgBluetoothManagerDeviceDetails.operation_in_progress)
    pub operation_in_progress: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgBluetoothManagerDeviceDetails.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgBluetoothManagerDeviceDetails {
    fn default() -> &'a CMsgBluetoothManagerDeviceDetails {
        <CMsgBluetoothManagerDeviceDetails as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgBluetoothManagerDeviceDetails {
    pub fn new() -> CMsgBluetoothManagerDeviceDetails {
        ::std::default::Default::default()
    }

    // optional uint32 id = 1;

    pub fn id(&self) -> u32 {
        self.id.unwrap_or(0u32)
    }

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = ::std::option::Option::Some(v);
    }

    // optional uint32 adapter_id = 2;

    pub fn adapter_id(&self) -> u32 {
        self.adapter_id.unwrap_or(0u32)
    }

    pub fn clear_adapter_id(&mut self) {
        self.adapter_id = ::std::option::Option::None;
    }

    pub fn has_adapter_id(&self) -> bool {
        self.adapter_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_adapter_id(&mut self, v: u32) {
        self.adapter_id = ::std::option::Option::Some(v);
    }

    // optional .EBluetoothDeviceType etype = 3;

    pub fn etype(&self) -> super::enums::EBluetoothDeviceType {
        match self.etype {
            Some(e) => e.enum_value_or(super::enums::EBluetoothDeviceType::k_BluetoothDeviceType_Invalid),
            None => super::enums::EBluetoothDeviceType::k_BluetoothDeviceType_Invalid,
        }
    }

    pub fn clear_etype(&mut self) {
        self.etype = ::std::option::Option::None;
    }

    pub fn has_etype(&self) -> bool {
        self.etype.is_some()
    }

    // Param is passed by value, moved
    pub fn set_etype(&mut self, v: super::enums::EBluetoothDeviceType) {
        self.etype = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional string mac = 4;

    pub fn mac(&self) -> &str {
        match self.mac.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_mac(&mut self) {
        self.mac = ::std::option::Option::None;
    }

    pub fn has_mac(&self) -> bool {
        self.mac.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mac(&mut self, v: ::std::string::String) {
        self.mac = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mac(&mut self) -> &mut ::std::string::String {
        if self.mac.is_none() {
            self.mac = ::std::option::Option::Some(::std::string::String::new());
        }
        self.mac.as_mut().unwrap()
    }

    // Take field
    pub fn take_mac(&mut self) -> ::std::string::String {
        self.mac.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string name = 5;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_connected = 6;

    pub fn is_connected(&self) -> bool {
        self.is_connected.unwrap_or(false)
    }

    pub fn clear_is_connected(&mut self) {
        self.is_connected = ::std::option::Option::None;
    }

    pub fn has_is_connected(&self) -> bool {
        self.is_connected.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_connected(&mut self, v: bool) {
        self.is_connected = ::std::option::Option::Some(v);
    }

    // optional bool is_paired = 7;

    pub fn is_paired(&self) -> bool {
        self.is_paired.unwrap_or(false)
    }

    pub fn clear_is_paired(&mut self) {
        self.is_paired = ::std::option::Option::None;
    }

    pub fn has_is_paired(&self) -> bool {
        self.is_paired.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_paired(&mut self, v: bool) {
        self.is_paired = ::std::option::Option::Some(v);
    }

    // optional bool is_pairing = 8;

    pub fn is_pairing(&self) -> bool {
        self.is_pairing.unwrap_or(false)
    }

    pub fn clear_is_pairing(&mut self) {
        self.is_pairing = ::std::option::Option::None;
    }

    pub fn has_is_pairing(&self) -> bool {
        self.is_pairing.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_pairing(&mut self, v: bool) {
        self.is_pairing = ::std::option::Option::Some(v);
    }

    // optional bool wake_allowed = 9;

    pub fn wake_allowed(&self) -> bool {
        self.wake_allowed.unwrap_or(false)
    }

    pub fn clear_wake_allowed(&mut self) {
        self.wake_allowed = ::std::option::Option::None;
    }

    pub fn has_wake_allowed(&self) -> bool {
        self.wake_allowed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wake_allowed(&mut self, v: bool) {
        self.wake_allowed = ::std::option::Option::Some(v);
    }

    // optional bool wake_allowed_supported = 10;

    pub fn wake_allowed_supported(&self) -> bool {
        self.wake_allowed_supported.unwrap_or(false)
    }

    pub fn clear_wake_allowed_supported(&mut self) {
        self.wake_allowed_supported = ::std::option::Option::None;
    }

    pub fn has_wake_allowed_supported(&self) -> bool {
        self.wake_allowed_supported.is_some()
    }

    // Param is passed by value, moved
    pub fn set_wake_allowed_supported(&mut self, v: bool) {
        self.wake_allowed_supported = ::std::option::Option::Some(v);
    }

    // optional int32 battery_percent = 11;

    pub fn battery_percent(&self) -> i32 {
        self.battery_percent.unwrap_or(0)
    }

    pub fn clear_battery_percent(&mut self) {
        self.battery_percent = ::std::option::Option::None;
    }

    pub fn has_battery_percent(&self) -> bool {
        self.battery_percent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_battery_percent(&mut self, v: i32) {
        self.battery_percent = ::std::option::Option::Some(v);
    }

    // optional bool operation_in_progress = 12;

    pub fn operation_in_progress(&self) -> bool {
        self.operation_in_progress.unwrap_or(false)
    }

    pub fn clear_operation_in_progress(&mut self) {
        self.operation_in_progress = ::std::option::Option::None;
    }

    pub fn has_operation_in_progress(&self) -> bool {
        self.operation_in_progress.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operation_in_progress(&mut self, v: bool) {
        self.operation_in_progress = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgBluetoothManagerDeviceDetails {
    const NAME: &'static str = "CMsgBluetoothManagerDeviceDetails";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.adapter_id = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.etype = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                34 => {
                    self.mac = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                48 => {
                    self.is_connected = ::std::option::Option::Some(is.read_bool()?);
                },
                56 => {
                    self.is_paired = ::std::option::Option::Some(is.read_bool()?);
                },
                64 => {
                    self.is_pairing = ::std::option::Option::Some(is.read_bool()?);
                },
                72 => {
                    self.wake_allowed = ::std::option::Option::Some(is.read_bool()?);
                },
                80 => {
                    self.wake_allowed_supported = ::std::option::Option::Some(is.read_bool()?);
                },
                88 => {
                    self.battery_percent = ::std::option::Option::Some(is.read_int32()?);
                },
                96 => {
                    self.operation_in_progress = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.adapter_id {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.etype {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.mac.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.is_connected {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_paired {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_pairing {
            my_size += 1 + 1;
        }
        if let Some(v) = self.wake_allowed {
            my_size += 1 + 1;
        }
        if let Some(v) = self.wake_allowed_supported {
            my_size += 1 + 1;
        }
        if let Some(v) = self.battery_percent {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(11, v);
        }
        if let Some(v) = self.operation_in_progress {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.adapter_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.etype {
            os.write_enum(3, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.mac.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.is_connected {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.is_paired {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.is_pairing {
            os.write_bool(8, v)?;
        }
        if let Some(v) = self.wake_allowed {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.wake_allowed_supported {
            os.write_bool(10, v)?;
        }
        if let Some(v) = self.battery_percent {
            os.write_int32(11, v)?;
        }
        if let Some(v) = self.operation_in_progress {
            os.write_bool(12, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgBluetoothManagerDeviceDetails {
        CMsgBluetoothManagerDeviceDetails::new()
    }

    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.adapter_id = ::std::option::Option::None;
        self.etype = ::std::option::Option::None;
        self.mac = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.is_connected = ::std::option::Option::None;
        self.is_paired = ::std::option::Option::None;
        self.is_pairing = ::std::option::Option::None;
        self.wake_allowed = ::std::option::Option::None;
        self.wake_allowed_supported = ::std::option::Option::None;
        self.battery_percent = ::std::option::Option::None;
        self.operation_in_progress = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgBluetoothManagerDeviceDetails {
        static instance: CMsgBluetoothManagerDeviceDetails = CMsgBluetoothManagerDeviceDetails {
            id: ::std::option::Option::None,
            adapter_id: ::std::option::Option::None,
            etype: ::std::option::Option::None,
            mac: ::std::option::Option::None,
            name: ::std::option::Option::None,
            is_connected: ::std::option::Option::None,
            is_paired: ::std::option::Option::None,
            is_pairing: ::std::option::Option::None,
            wake_allowed: ::std::option::Option::None,
            wake_allowed_supported: ::std::option::Option::None,
            battery_percent: ::std::option::Option::None,
            operation_in_progress: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CBluetoothManager_GetDeviceDetails_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_GetDeviceDetails_Response {
    // message fields
    // @@protoc_insertion_point(field:CBluetoothManager_GetDeviceDetails_Response.device)
    pub device: ::steam_vent_proto_common::protobuf::MessageField<CMsgBluetoothManagerDeviceDetails>,
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_GetDeviceDetails_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_GetDeviceDetails_Response {
    fn default() -> &'a CBluetoothManager_GetDeviceDetails_Response {
        <CBluetoothManager_GetDeviceDetails_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_GetDeviceDetails_Response {
    pub fn new() -> CBluetoothManager_GetDeviceDetails_Response {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_GetDeviceDetails_Response {
    const NAME: &'static str = "CBluetoothManager_GetDeviceDetails_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.device)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.device.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.device.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_GetDeviceDetails_Response {
        CBluetoothManager_GetDeviceDetails_Response::new()
    }

    fn clear(&mut self) {
        self.device.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_GetDeviceDetails_Response {
        static instance: CBluetoothManager_GetDeviceDetails_Response = CBluetoothManager_GetDeviceDetails_Response {
            device: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CBluetoothManager_StateChanged_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_StateChanged_Notification {
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_StateChanged_Notification.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_StateChanged_Notification {
    fn default() -> &'a CBluetoothManager_StateChanged_Notification {
        <CBluetoothManager_StateChanged_Notification as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_StateChanged_Notification {
    pub fn new() -> CBluetoothManager_StateChanged_Notification {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_StateChanged_Notification {
    const NAME: &'static str = "CBluetoothManager_StateChanged_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_StateChanged_Notification {
        CBluetoothManager_StateChanged_Notification::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_StateChanged_Notification {
        static instance: CBluetoothManager_StateChanged_Notification = CBluetoothManager_StateChanged_Notification {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CBluetoothManager_SetDiscovering_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_SetDiscovering_Request {
    // message fields
    // @@protoc_insertion_point(field:CBluetoothManager_SetDiscovering_Request.enabled)
    pub enabled: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_SetDiscovering_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_SetDiscovering_Request {
    fn default() -> &'a CBluetoothManager_SetDiscovering_Request {
        <CBluetoothManager_SetDiscovering_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_SetDiscovering_Request {
    pub fn new() -> CBluetoothManager_SetDiscovering_Request {
        ::std::default::Default::default()
    }

    // optional bool enabled = 1;

    pub fn enabled(&self) -> bool {
        self.enabled.unwrap_or(false)
    }

    pub fn clear_enabled(&mut self) {
        self.enabled = ::std::option::Option::None;
    }

    pub fn has_enabled(&self) -> bool {
        self.enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enabled(&mut self, v: bool) {
        self.enabled = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_SetDiscovering_Request {
    const NAME: &'static str = "CBluetoothManager_SetDiscovering_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.enabled {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.enabled {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_SetDiscovering_Request {
        CBluetoothManager_SetDiscovering_Request::new()
    }

    fn clear(&mut self) {
        self.enabled = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_SetDiscovering_Request {
        static instance: CBluetoothManager_SetDiscovering_Request = CBluetoothManager_SetDiscovering_Request {
            enabled: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CBluetoothManager_SetDiscovering_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_SetDiscovering_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_SetDiscovering_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_SetDiscovering_Response {
    fn default() -> &'a CBluetoothManager_SetDiscovering_Response {
        <CBluetoothManager_SetDiscovering_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_SetDiscovering_Response {
    pub fn new() -> CBluetoothManager_SetDiscovering_Response {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_SetDiscovering_Response {
    const NAME: &'static str = "CBluetoothManager_SetDiscovering_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_SetDiscovering_Response {
        CBluetoothManager_SetDiscovering_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_SetDiscovering_Response {
        static instance: CBluetoothManager_SetDiscovering_Response = CBluetoothManager_SetDiscovering_Response {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CBluetoothManager_Pair_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_Pair_Request {
    // message fields
    // @@protoc_insertion_point(field:CBluetoothManager_Pair_Request.device)
    pub device: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_Pair_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_Pair_Request {
    fn default() -> &'a CBluetoothManager_Pair_Request {
        <CBluetoothManager_Pair_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_Pair_Request {
    pub fn new() -> CBluetoothManager_Pair_Request {
        ::std::default::Default::default()
    }

    // optional uint32 device = 1;

    pub fn device(&self) -> u32 {
        self.device.unwrap_or(0)
    }

    pub fn clear_device(&mut self) {
        self.device = ::std::option::Option::None;
    }

    pub fn has_device(&self) -> bool {
        self.device.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device(&mut self, v: u32) {
        self.device = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_Pair_Request {
    const NAME: &'static str = "CBluetoothManager_Pair_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.device = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.device {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.device {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_Pair_Request {
        CBluetoothManager_Pair_Request::new()
    }

    fn clear(&mut self) {
        self.device = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_Pair_Request {
        static instance: CBluetoothManager_Pair_Request = CBluetoothManager_Pair_Request {
            device: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CBluetoothManager_Pair_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_Pair_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_Pair_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_Pair_Response {
    fn default() -> &'a CBluetoothManager_Pair_Response {
        <CBluetoothManager_Pair_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_Pair_Response {
    pub fn new() -> CBluetoothManager_Pair_Response {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_Pair_Response {
    const NAME: &'static str = "CBluetoothManager_Pair_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_Pair_Response {
        CBluetoothManager_Pair_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_Pair_Response {
        static instance: CBluetoothManager_Pair_Response = CBluetoothManager_Pair_Response {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CBluetoothManager_CancelPair_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_CancelPair_Request {
    // message fields
    // @@protoc_insertion_point(field:CBluetoothManager_CancelPair_Request.device)
    pub device: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_CancelPair_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_CancelPair_Request {
    fn default() -> &'a CBluetoothManager_CancelPair_Request {
        <CBluetoothManager_CancelPair_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_CancelPair_Request {
    pub fn new() -> CBluetoothManager_CancelPair_Request {
        ::std::default::Default::default()
    }

    // optional uint32 device = 1;

    pub fn device(&self) -> u32 {
        self.device.unwrap_or(0)
    }

    pub fn clear_device(&mut self) {
        self.device = ::std::option::Option::None;
    }

    pub fn has_device(&self) -> bool {
        self.device.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device(&mut self, v: u32) {
        self.device = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_CancelPair_Request {
    const NAME: &'static str = "CBluetoothManager_CancelPair_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.device = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.device {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.device {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_CancelPair_Request {
        CBluetoothManager_CancelPair_Request::new()
    }

    fn clear(&mut self) {
        self.device = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_CancelPair_Request {
        static instance: CBluetoothManager_CancelPair_Request = CBluetoothManager_CancelPair_Request {
            device: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CBluetoothManager_CancelPair_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_CancelPair_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_CancelPair_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_CancelPair_Response {
    fn default() -> &'a CBluetoothManager_CancelPair_Response {
        <CBluetoothManager_CancelPair_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_CancelPair_Response {
    pub fn new() -> CBluetoothManager_CancelPair_Response {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_CancelPair_Response {
    const NAME: &'static str = "CBluetoothManager_CancelPair_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_CancelPair_Response {
        CBluetoothManager_CancelPair_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_CancelPair_Response {
        static instance: CBluetoothManager_CancelPair_Response = CBluetoothManager_CancelPair_Response {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CBluetoothManager_Forget_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_Forget_Request {
    // message fields
    // @@protoc_insertion_point(field:CBluetoothManager_Forget_Request.device)
    pub device: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_Forget_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_Forget_Request {
    fn default() -> &'a CBluetoothManager_Forget_Request {
        <CBluetoothManager_Forget_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_Forget_Request {
    pub fn new() -> CBluetoothManager_Forget_Request {
        ::std::default::Default::default()
    }

    // optional uint32 device = 1;

    pub fn device(&self) -> u32 {
        self.device.unwrap_or(0)
    }

    pub fn clear_device(&mut self) {
        self.device = ::std::option::Option::None;
    }

    pub fn has_device(&self) -> bool {
        self.device.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device(&mut self, v: u32) {
        self.device = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_Forget_Request {
    const NAME: &'static str = "CBluetoothManager_Forget_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.device = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.device {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.device {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_Forget_Request {
        CBluetoothManager_Forget_Request::new()
    }

    fn clear(&mut self) {
        self.device = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_Forget_Request {
        static instance: CBluetoothManager_Forget_Request = CBluetoothManager_Forget_Request {
            device: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CBluetoothManager_Forget_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_Forget_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_Forget_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_Forget_Response {
    fn default() -> &'a CBluetoothManager_Forget_Response {
        <CBluetoothManager_Forget_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_Forget_Response {
    pub fn new() -> CBluetoothManager_Forget_Response {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_Forget_Response {
    const NAME: &'static str = "CBluetoothManager_Forget_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_Forget_Response {
        CBluetoothManager_Forget_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_Forget_Response {
        static instance: CBluetoothManager_Forget_Response = CBluetoothManager_Forget_Response {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CBluetoothManager_Connect_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_Connect_Request {
    // message fields
    // @@protoc_insertion_point(field:CBluetoothManager_Connect_Request.device)
    pub device: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_Connect_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_Connect_Request {
    fn default() -> &'a CBluetoothManager_Connect_Request {
        <CBluetoothManager_Connect_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_Connect_Request {
    pub fn new() -> CBluetoothManager_Connect_Request {
        ::std::default::Default::default()
    }

    // optional uint32 device = 1;

    pub fn device(&self) -> u32 {
        self.device.unwrap_or(0)
    }

    pub fn clear_device(&mut self) {
        self.device = ::std::option::Option::None;
    }

    pub fn has_device(&self) -> bool {
        self.device.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device(&mut self, v: u32) {
        self.device = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_Connect_Request {
    const NAME: &'static str = "CBluetoothManager_Connect_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.device = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.device {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.device {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_Connect_Request {
        CBluetoothManager_Connect_Request::new()
    }

    fn clear(&mut self) {
        self.device = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_Connect_Request {
        static instance: CBluetoothManager_Connect_Request = CBluetoothManager_Connect_Request {
            device: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CBluetoothManager_Connect_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_Connect_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_Connect_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_Connect_Response {
    fn default() -> &'a CBluetoothManager_Connect_Response {
        <CBluetoothManager_Connect_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_Connect_Response {
    pub fn new() -> CBluetoothManager_Connect_Response {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_Connect_Response {
    const NAME: &'static str = "CBluetoothManager_Connect_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_Connect_Response {
        CBluetoothManager_Connect_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_Connect_Response {
        static instance: CBluetoothManager_Connect_Response = CBluetoothManager_Connect_Response {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CBluetoothManager_Disconnect_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_Disconnect_Request {
    // message fields
    // @@protoc_insertion_point(field:CBluetoothManager_Disconnect_Request.device)
    pub device: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_Disconnect_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_Disconnect_Request {
    fn default() -> &'a CBluetoothManager_Disconnect_Request {
        <CBluetoothManager_Disconnect_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_Disconnect_Request {
    pub fn new() -> CBluetoothManager_Disconnect_Request {
        ::std::default::Default::default()
    }

    // optional uint32 device = 1;

    pub fn device(&self) -> u32 {
        self.device.unwrap_or(0)
    }

    pub fn clear_device(&mut self) {
        self.device = ::std::option::Option::None;
    }

    pub fn has_device(&self) -> bool {
        self.device.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device(&mut self, v: u32) {
        self.device = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_Disconnect_Request {
    const NAME: &'static str = "CBluetoothManager_Disconnect_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.device = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.device {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.device {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_Disconnect_Request {
        CBluetoothManager_Disconnect_Request::new()
    }

    fn clear(&mut self) {
        self.device = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_Disconnect_Request {
        static instance: CBluetoothManager_Disconnect_Request = CBluetoothManager_Disconnect_Request {
            device: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CBluetoothManager_Disconnect_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_Disconnect_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_Disconnect_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_Disconnect_Response {
    fn default() -> &'a CBluetoothManager_Disconnect_Response {
        <CBluetoothManager_Disconnect_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_Disconnect_Response {
    pub fn new() -> CBluetoothManager_Disconnect_Response {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_Disconnect_Response {
    const NAME: &'static str = "CBluetoothManager_Disconnect_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_Disconnect_Response {
        CBluetoothManager_Disconnect_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_Disconnect_Response {
        static instance: CBluetoothManager_Disconnect_Response = CBluetoothManager_Disconnect_Response {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CBluetoothManager_SetWakeAllowed_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_SetWakeAllowed_Request {
    // message fields
    // @@protoc_insertion_point(field:CBluetoothManager_SetWakeAllowed_Request.device)
    pub device: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:CBluetoothManager_SetWakeAllowed_Request.allowed)
    pub allowed: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_SetWakeAllowed_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_SetWakeAllowed_Request {
    fn default() -> &'a CBluetoothManager_SetWakeAllowed_Request {
        <CBluetoothManager_SetWakeAllowed_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_SetWakeAllowed_Request {
    pub fn new() -> CBluetoothManager_SetWakeAllowed_Request {
        ::std::default::Default::default()
    }

    // optional uint32 device = 1;

    pub fn device(&self) -> u32 {
        self.device.unwrap_or(0)
    }

    pub fn clear_device(&mut self) {
        self.device = ::std::option::Option::None;
    }

    pub fn has_device(&self) -> bool {
        self.device.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device(&mut self, v: u32) {
        self.device = ::std::option::Option::Some(v);
    }

    // optional bool allowed = 2;

    pub fn allowed(&self) -> bool {
        self.allowed.unwrap_or(false)
    }

    pub fn clear_allowed(&mut self) {
        self.allowed = ::std::option::Option::None;
    }

    pub fn has_allowed(&self) -> bool {
        self.allowed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allowed(&mut self, v: bool) {
        self.allowed = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_SetWakeAllowed_Request {
    const NAME: &'static str = "CBluetoothManager_SetWakeAllowed_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.device = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.allowed = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.device {
            my_size += ::steam_vent_proto_common::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.allowed {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.device {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.allowed {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_SetWakeAllowed_Request {
        CBluetoothManager_SetWakeAllowed_Request::new()
    }

    fn clear(&mut self) {
        self.device = ::std::option::Option::None;
        self.allowed = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_SetWakeAllowed_Request {
        static instance: CBluetoothManager_SetWakeAllowed_Request = CBluetoothManager_SetWakeAllowed_Request {
            device: ::std::option::Option::None,
            allowed: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CBluetoothManager_SetWakeAllowed_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CBluetoothManager_SetWakeAllowed_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CBluetoothManager_SetWakeAllowed_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CBluetoothManager_SetWakeAllowed_Response {
    fn default() -> &'a CBluetoothManager_SetWakeAllowed_Response {
        <CBluetoothManager_SetWakeAllowed_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CBluetoothManager_SetWakeAllowed_Response {
    pub fn new() -> CBluetoothManager_SetWakeAllowed_Response {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CBluetoothManager_SetWakeAllowed_Response {
    const NAME: &'static str = "CBluetoothManager_SetWakeAllowed_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CBluetoothManager_SetWakeAllowed_Response {
        CBluetoothManager_SetWakeAllowed_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CBluetoothManager_SetWakeAllowed_Response {
        static instance: CBluetoothManager_SetWakeAllowed_Response = CBluetoothManager_SetWakeAllowed_Response {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}


const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::enums::*;
#[allow(unused_imports)]
use crate::steammessages_base::*;
#[allow(unused_imports)]
use crate::webuimessages_base::*;
impl ::steam_vent_proto_common::RpcMessage for CBluetoothManager_GetState_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgBluetoothManagerAdapterInfo {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgBluetoothManagerDeviceInfo {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CBluetoothManager_GetState_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CBluetoothManager_GetAdapterDetails_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgBluetoothManagerAdapterDetails {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CBluetoothManager_GetAdapterDetails_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CBluetoothManager_GetDeviceDetails_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgBluetoothManagerDeviceDetails {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CBluetoothManager_GetDeviceDetails_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CBluetoothManager_StateChanged_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CBluetoothManager_SetDiscovering_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CBluetoothManager_SetDiscovering_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CBluetoothManager_Pair_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CBluetoothManager_Pair_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CBluetoothManager_CancelPair_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CBluetoothManager_CancelPair_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CBluetoothManager_Forget_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CBluetoothManager_Forget_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CBluetoothManager_Connect_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CBluetoothManager_Connect_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CBluetoothManager_Disconnect_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CBluetoothManager_Disconnect_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CBluetoothManager_SetWakeAllowed_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage
for CBluetoothManager_SetWakeAllowed_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
///
struct BluetoothManager {}
impl ::steam_vent_proto_common::RpcService for BluetoothManager {
    const SERVICE_NAME: &'static str = "BluetoothManager";
}
impl ::steam_vent_proto_common::RpcMethod for CBluetoothManager_CancelPair_Request {
    const METHOD_NAME: &'static str = "BluetoothManager.CancelPair#1";
    type Response = CBluetoothManager_CancelPair_Response;
}
impl ::steam_vent_proto_common::RpcMethod for CBluetoothManager_Connect_Request {
    const METHOD_NAME: &'static str = "BluetoothManager.Connect#1";
    type Response = CBluetoothManager_Connect_Response;
}
impl ::steam_vent_proto_common::RpcMethod for CBluetoothManager_Disconnect_Request {
    const METHOD_NAME: &'static str = "BluetoothManager.Disconnect#1";
    type Response = CBluetoothManager_Disconnect_Response;
}
impl ::steam_vent_proto_common::RpcMethod for CBluetoothManager_Forget_Request {
    const METHOD_NAME: &'static str = "BluetoothManager.Forget#1";
    type Response = CBluetoothManager_Forget_Response;
}
impl ::steam_vent_proto_common::RpcMethod
for CBluetoothManager_GetAdapterDetails_Request {
    const METHOD_NAME: &'static str = "BluetoothManager.GetAdapterDetails#1";
    type Response = CBluetoothManager_GetAdapterDetails_Response;
}
impl ::steam_vent_proto_common::RpcMethod
for CBluetoothManager_GetDeviceDetails_Request {
    const METHOD_NAME: &'static str = "BluetoothManager.GetDeviceDetails#1";
    type Response = CBluetoothManager_GetDeviceDetails_Response;
}
impl ::steam_vent_proto_common::RpcMethod for CBluetoothManager_GetState_Request {
    const METHOD_NAME: &'static str = "BluetoothManager.GetState#1";
    type Response = CBluetoothManager_GetState_Response;
}
impl ::steam_vent_proto_common::RpcMethod for CBluetoothManager_Pair_Request {
    const METHOD_NAME: &'static str = "BluetoothManager.Pair#1";
    type Response = CBluetoothManager_Pair_Response;
}
impl ::steam_vent_proto_common::RpcMethod for CBluetoothManager_SetDiscovering_Request {
    const METHOD_NAME: &'static str = "BluetoothManager.SetDiscovering#1";
    type Response = CBluetoothManager_SetDiscovering_Response;
}
impl ::steam_vent_proto_common::RpcMethod for CBluetoothManager_SetWakeAllowed_Request {
    const METHOD_NAME: &'static str = "BluetoothManager.SetWakeAllowed#1";
    type Response = CBluetoothManager_SetWakeAllowed_Response;
}
impl ::steam_vent_proto_common::RpcMethod
for CBluetoothManager_StateChanged_Notification {
    const METHOD_NAME: &'static str = "BluetoothManager.NotifyStateChanged#1";
    type Response = WebUINoResponse;
}
