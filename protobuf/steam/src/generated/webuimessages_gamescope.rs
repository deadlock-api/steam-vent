// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `webuimessages_gamescope.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::steam_vent_proto_common::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:CMsgDisplayInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgDisplayInfo {
    // message fields
    // @@protoc_insertion_point(field:CMsgDisplayInfo.make)
    pub make: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDisplayInfo.model)
    pub model: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDisplayInfo.connector_name)
    pub connector_name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:CMsgDisplayInfo.supported_refresh_rates)
    pub supported_refresh_rates: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:CMsgDisplayInfo.supported_frame_rates)
    pub supported_frame_rates: ::std::vec::Vec<i32>,
    // @@protoc_insertion_point(field:CMsgDisplayInfo.is_external)
    pub is_external: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgDisplayInfo.is_hdr_capable)
    pub is_hdr_capable: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgDisplayInfo.is_vrr_capable)
    pub is_vrr_capable: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgDisplayInfo.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgDisplayInfo {
    fn default() -> &'a CMsgDisplayInfo {
        <CMsgDisplayInfo as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgDisplayInfo {
    pub fn new() -> CMsgDisplayInfo {
        ::std::default::Default::default()
    }

    // optional string make = 1;

    pub fn make(&self) -> &str {
        match self.make.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_make(&mut self) {
        self.make = ::std::option::Option::None;
    }

    pub fn has_make(&self) -> bool {
        self.make.is_some()
    }

    // Param is passed by value, moved
    pub fn set_make(&mut self, v: ::std::string::String) {
        self.make = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_make(&mut self) -> &mut ::std::string::String {
        if self.make.is_none() {
            self.make = ::std::option::Option::Some(::std::string::String::new());
        }
        self.make.as_mut().unwrap()
    }

    // Take field
    pub fn take_make(&mut self) -> ::std::string::String {
        self.make.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string model = 2;

    pub fn model(&self) -> &str {
        match self.model.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_model(&mut self) {
        self.model = ::std::option::Option::None;
    }

    pub fn has_model(&self) -> bool {
        self.model.is_some()
    }

    // Param is passed by value, moved
    pub fn set_model(&mut self, v: ::std::string::String) {
        self.model = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_model(&mut self) -> &mut ::std::string::String {
        if self.model.is_none() {
            self.model = ::std::option::Option::Some(::std::string::String::new());
        }
        self.model.as_mut().unwrap()
    }

    // Take field
    pub fn take_model(&mut self) -> ::std::string::String {
        self.model.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string connector_name = 3;

    pub fn connector_name(&self) -> &str {
        match self.connector_name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_connector_name(&mut self) {
        self.connector_name = ::std::option::Option::None;
    }

    pub fn has_connector_name(&self) -> bool {
        self.connector_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connector_name(&mut self, v: ::std::string::String) {
        self.connector_name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connector_name(&mut self) -> &mut ::std::string::String {
        if self.connector_name.is_none() {
            self.connector_name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.connector_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_connector_name(&mut self) -> ::std::string::String {
        self.connector_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bool is_external = 6;

    pub fn is_external(&self) -> bool {
        self.is_external.unwrap_or(false)
    }

    pub fn clear_is_external(&mut self) {
        self.is_external = ::std::option::Option::None;
    }

    pub fn has_is_external(&self) -> bool {
        self.is_external.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_external(&mut self, v: bool) {
        self.is_external = ::std::option::Option::Some(v);
    }

    // optional bool is_hdr_capable = 7;

    pub fn is_hdr_capable(&self) -> bool {
        self.is_hdr_capable.unwrap_or(false)
    }

    pub fn clear_is_hdr_capable(&mut self) {
        self.is_hdr_capable = ::std::option::Option::None;
    }

    pub fn has_is_hdr_capable(&self) -> bool {
        self.is_hdr_capable.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_hdr_capable(&mut self, v: bool) {
        self.is_hdr_capable = ::std::option::Option::Some(v);
    }

    // optional bool is_vrr_capable = 8;

    pub fn is_vrr_capable(&self) -> bool {
        self.is_vrr_capable.unwrap_or(false)
    }

    pub fn clear_is_vrr_capable(&mut self) {
        self.is_vrr_capable = ::std::option::Option::None;
    }

    pub fn has_is_vrr_capable(&self) -> bool {
        self.is_vrr_capable.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_vrr_capable(&mut self, v: bool) {
        self.is_vrr_capable = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgDisplayInfo {
    const NAME: &'static str = "CMsgDisplayInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.make = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.model = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.connector_name = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    is.read_repeated_packed_int32_into(&mut self.supported_refresh_rates)?;
                },
                32 => {
                    self.supported_refresh_rates.push(is.read_int32()?);
                },
                42 => {
                    is.read_repeated_packed_int32_into(&mut self.supported_frame_rates)?;
                },
                40 => {
                    self.supported_frame_rates.push(is.read_int32()?);
                },
                48 => {
                    self.is_external = ::std::option::Option::Some(is.read_bool()?);
                },
                56 => {
                    self.is_hdr_capable = ::std::option::Option::Some(is.read_bool()?);
                },
                64 => {
                    self.is_vrr_capable = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.make.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.model.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.connector_name.as_ref() {
            my_size += ::steam_vent_proto_common::protobuf::rt::string_size(3, &v);
        }
        for value in &self.supported_refresh_rates {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(4, *value);
        };
        for value in &self.supported_frame_rates {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(5, *value);
        };
        if let Some(v) = self.is_external {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_hdr_capable {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_vrr_capable {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.make.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.model.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.connector_name.as_ref() {
            os.write_string(3, v)?;
        }
        for v in &self.supported_refresh_rates {
            os.write_int32(4, *v)?;
        };
        for v in &self.supported_frame_rates {
            os.write_int32(5, *v)?;
        };
        if let Some(v) = self.is_external {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.is_hdr_capable {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.is_vrr_capable {
            os.write_bool(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgDisplayInfo {
        CMsgDisplayInfo::new()
    }

    fn clear(&mut self) {
        self.make = ::std::option::Option::None;
        self.model = ::std::option::Option::None;
        self.connector_name = ::std::option::Option::None;
        self.supported_refresh_rates.clear();
        self.supported_frame_rates.clear();
        self.is_external = ::std::option::Option::None;
        self.is_hdr_capable = ::std::option::Option::None;
        self.is_vrr_capable = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgDisplayInfo {
        static instance: CMsgDisplayInfo = CMsgDisplayInfo {
            make: ::std::option::Option::None,
            model: ::std::option::Option::None,
            connector_name: ::std::option::Option::None,
            supported_refresh_rates: ::std::vec::Vec::new(),
            supported_frame_rates: ::std::vec::Vec::new(),
            is_external: ::std::option::Option::None,
            is_hdr_capable: ::std::option::Option::None,
            is_vrr_capable: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CMsgGamescopeState)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CMsgGamescopeState {
    // message fields
    // @@protoc_insertion_point(field:CMsgGamescopeState.is_service_available)
    pub is_service_available: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGamescopeState.is_reshade_supported)
    pub is_reshade_supported: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGamescopeState.is_app_hdr_enabled)
    pub is_app_hdr_enabled: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGamescopeState.is_app_refresh_rate_supported)
    pub is_app_refresh_rate_supported: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGamescopeState.active_display_info)
    pub active_display_info: ::steam_vent_proto_common::protobuf::MessageField<CMsgDisplayInfo>,
    // @@protoc_insertion_point(field:CMsgGamescopeState.is_app_refresh_rate_capable)
    pub is_app_refresh_rate_capable: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGamescopeState.is_refresh_rate_switching_supported)
    pub is_refresh_rate_switching_supported: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGamescopeState.is_refresh_rate_switching_restricted)
    pub is_refresh_rate_switching_restricted: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGamescopeState.is_hdr_visualization_supported)
    pub is_hdr_visualization_supported: ::std::option::Option<bool>,
    // @@protoc_insertion_point(field:CMsgGamescopeState.is_mura_correction_supported)
    pub is_mura_correction_supported: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:CMsgGamescopeState.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CMsgGamescopeState {
    fn default() -> &'a CMsgGamescopeState {
        <CMsgGamescopeState as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CMsgGamescopeState {
    pub fn new() -> CMsgGamescopeState {
        ::std::default::Default::default()
    }

    // optional bool is_service_available = 1;

    pub fn is_service_available(&self) -> bool {
        self.is_service_available.unwrap_or(false)
    }

    pub fn clear_is_service_available(&mut self) {
        self.is_service_available = ::std::option::Option::None;
    }

    pub fn has_is_service_available(&self) -> bool {
        self.is_service_available.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_service_available(&mut self, v: bool) {
        self.is_service_available = ::std::option::Option::Some(v);
    }

    // optional bool is_reshade_supported = 2;

    pub fn is_reshade_supported(&self) -> bool {
        self.is_reshade_supported.unwrap_or(false)
    }

    pub fn clear_is_reshade_supported(&mut self) {
        self.is_reshade_supported = ::std::option::Option::None;
    }

    pub fn has_is_reshade_supported(&self) -> bool {
        self.is_reshade_supported.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_reshade_supported(&mut self, v: bool) {
        self.is_reshade_supported = ::std::option::Option::Some(v);
    }

    // optional bool is_app_hdr_enabled = 3;

    pub fn is_app_hdr_enabled(&self) -> bool {
        self.is_app_hdr_enabled.unwrap_or(false)
    }

    pub fn clear_is_app_hdr_enabled(&mut self) {
        self.is_app_hdr_enabled = ::std::option::Option::None;
    }

    pub fn has_is_app_hdr_enabled(&self) -> bool {
        self.is_app_hdr_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_app_hdr_enabled(&mut self, v: bool) {
        self.is_app_hdr_enabled = ::std::option::Option::Some(v);
    }

    // optional bool is_app_refresh_rate_supported = 4;

    pub fn is_app_refresh_rate_supported(&self) -> bool {
        self.is_app_refresh_rate_supported.unwrap_or(false)
    }

    pub fn clear_is_app_refresh_rate_supported(&mut self) {
        self.is_app_refresh_rate_supported = ::std::option::Option::None;
    }

    pub fn has_is_app_refresh_rate_supported(&self) -> bool {
        self.is_app_refresh_rate_supported.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_app_refresh_rate_supported(&mut self, v: bool) {
        self.is_app_refresh_rate_supported = ::std::option::Option::Some(v);
    }

    // optional bool is_app_refresh_rate_capable = 6;

    pub fn is_app_refresh_rate_capable(&self) -> bool {
        self.is_app_refresh_rate_capable.unwrap_or(false)
    }

    pub fn clear_is_app_refresh_rate_capable(&mut self) {
        self.is_app_refresh_rate_capable = ::std::option::Option::None;
    }

    pub fn has_is_app_refresh_rate_capable(&self) -> bool {
        self.is_app_refresh_rate_capable.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_app_refresh_rate_capable(&mut self, v: bool) {
        self.is_app_refresh_rate_capable = ::std::option::Option::Some(v);
    }

    // optional bool is_refresh_rate_switching_supported = 7;

    pub fn is_refresh_rate_switching_supported(&self) -> bool {
        self.is_refresh_rate_switching_supported.unwrap_or(false)
    }

    pub fn clear_is_refresh_rate_switching_supported(&mut self) {
        self.is_refresh_rate_switching_supported = ::std::option::Option::None;
    }

    pub fn has_is_refresh_rate_switching_supported(&self) -> bool {
        self.is_refresh_rate_switching_supported.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_refresh_rate_switching_supported(&mut self, v: bool) {
        self.is_refresh_rate_switching_supported = ::std::option::Option::Some(v);
    }

    // optional bool is_refresh_rate_switching_restricted = 8;

    pub fn is_refresh_rate_switching_restricted(&self) -> bool {
        self.is_refresh_rate_switching_restricted.unwrap_or(false)
    }

    pub fn clear_is_refresh_rate_switching_restricted(&mut self) {
        self.is_refresh_rate_switching_restricted = ::std::option::Option::None;
    }

    pub fn has_is_refresh_rate_switching_restricted(&self) -> bool {
        self.is_refresh_rate_switching_restricted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_refresh_rate_switching_restricted(&mut self, v: bool) {
        self.is_refresh_rate_switching_restricted = ::std::option::Option::Some(v);
    }

    // optional bool is_hdr_visualization_supported = 9;

    pub fn is_hdr_visualization_supported(&self) -> bool {
        self.is_hdr_visualization_supported.unwrap_or(false)
    }

    pub fn clear_is_hdr_visualization_supported(&mut self) {
        self.is_hdr_visualization_supported = ::std::option::Option::None;
    }

    pub fn has_is_hdr_visualization_supported(&self) -> bool {
        self.is_hdr_visualization_supported.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_hdr_visualization_supported(&mut self, v: bool) {
        self.is_hdr_visualization_supported = ::std::option::Option::Some(v);
    }

    // optional bool is_mura_correction_supported = 10;

    pub fn is_mura_correction_supported(&self) -> bool {
        self.is_mura_correction_supported.unwrap_or(false)
    }

    pub fn clear_is_mura_correction_supported(&mut self) {
        self.is_mura_correction_supported = ::std::option::Option::None;
    }

    pub fn has_is_mura_correction_supported(&self) -> bool {
        self.is_mura_correction_supported.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_mura_correction_supported(&mut self, v: bool) {
        self.is_mura_correction_supported = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CMsgGamescopeState {
    const NAME: &'static str = "CMsgGamescopeState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.is_service_available = ::std::option::Option::Some(is.read_bool()?);
                },
                16 => {
                    self.is_reshade_supported = ::std::option::Option::Some(is.read_bool()?);
                },
                24 => {
                    self.is_app_hdr_enabled = ::std::option::Option::Some(is.read_bool()?);
                },
                32 => {
                    self.is_app_refresh_rate_supported = ::std::option::Option::Some(is.read_bool()?);
                },
                42 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.active_display_info)?;
                },
                48 => {
                    self.is_app_refresh_rate_capable = ::std::option::Option::Some(is.read_bool()?);
                },
                56 => {
                    self.is_refresh_rate_switching_supported = ::std::option::Option::Some(is.read_bool()?);
                },
                64 => {
                    self.is_refresh_rate_switching_restricted = ::std::option::Option::Some(is.read_bool()?);
                },
                72 => {
                    self.is_hdr_visualization_supported = ::std::option::Option::Some(is.read_bool()?);
                },
                80 => {
                    self.is_mura_correction_supported = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.is_service_available {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_reshade_supported {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_app_hdr_enabled {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_app_refresh_rate_supported {
            my_size += 1 + 1;
        }
        if let Some(v) = self.active_display_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.is_app_refresh_rate_capable {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_refresh_rate_switching_supported {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_refresh_rate_switching_restricted {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_hdr_visualization_supported {
            my_size += 1 + 1;
        }
        if let Some(v) = self.is_mura_correction_supported {
            my_size += 1 + 1;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.is_service_available {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.is_reshade_supported {
            os.write_bool(2, v)?;
        }
        if let Some(v) = self.is_app_hdr_enabled {
            os.write_bool(3, v)?;
        }
        if let Some(v) = self.is_app_refresh_rate_supported {
            os.write_bool(4, v)?;
        }
        if let Some(v) = self.active_display_info.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.is_app_refresh_rate_capable {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.is_refresh_rate_switching_supported {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.is_refresh_rate_switching_restricted {
            os.write_bool(8, v)?;
        }
        if let Some(v) = self.is_hdr_visualization_supported {
            os.write_bool(9, v)?;
        }
        if let Some(v) = self.is_mura_correction_supported {
            os.write_bool(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CMsgGamescopeState {
        CMsgGamescopeState::new()
    }

    fn clear(&mut self) {
        self.is_service_available = ::std::option::Option::None;
        self.is_reshade_supported = ::std::option::Option::None;
        self.is_app_hdr_enabled = ::std::option::Option::None;
        self.is_app_refresh_rate_supported = ::std::option::Option::None;
        self.active_display_info.clear();
        self.is_app_refresh_rate_capable = ::std::option::Option::None;
        self.is_refresh_rate_switching_supported = ::std::option::Option::None;
        self.is_refresh_rate_switching_restricted = ::std::option::Option::None;
        self.is_hdr_visualization_supported = ::std::option::Option::None;
        self.is_mura_correction_supported = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CMsgGamescopeState {
        static instance: CMsgGamescopeState = CMsgGamescopeState {
            is_service_available: ::std::option::Option::None,
            is_reshade_supported: ::std::option::Option::None,
            is_app_hdr_enabled: ::std::option::Option::None,
            is_app_refresh_rate_supported: ::std::option::Option::None,
            active_display_info: ::steam_vent_proto_common::protobuf::MessageField::none(),
            is_app_refresh_rate_capable: ::std::option::Option::None,
            is_refresh_rate_switching_supported: ::std::option::Option::None,
            is_refresh_rate_switching_restricted: ::std::option::Option::None,
            is_hdr_visualization_supported: ::std::option::Option::None,
            is_mura_correction_supported: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGamescope_GetState_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGamescope_GetState_Request {
    // special fields
    // @@protoc_insertion_point(special_field:CGamescope_GetState_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGamescope_GetState_Request {
    fn default() -> &'a CGamescope_GetState_Request {
        <CGamescope_GetState_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGamescope_GetState_Request {
    pub fn new() -> CGamescope_GetState_Request {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGamescope_GetState_Request {
    const NAME: &'static str = "CGamescope_GetState_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGamescope_GetState_Request {
        CGamescope_GetState_Request::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGamescope_GetState_Request {
        static instance: CGamescope_GetState_Request = CGamescope_GetState_Request {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGamescope_GetState_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGamescope_GetState_Response {
    // message fields
    // @@protoc_insertion_point(field:CGamescope_GetState_Response.state)
    pub state: ::steam_vent_proto_common::protobuf::MessageField<CMsgGamescopeState>,
    // special fields
    // @@protoc_insertion_point(special_field:CGamescope_GetState_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGamescope_GetState_Response {
    fn default() -> &'a CGamescope_GetState_Response {
        <CGamescope_GetState_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGamescope_GetState_Response {
    pub fn new() -> CGamescope_GetState_Response {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGamescope_GetState_Response {
    const NAME: &'static str = "CGamescope_GetState_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::steam_vent_proto_common::protobuf::rt::read_singular_message_into_field(is, &mut self.state)?;
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::steam_vent_proto_common::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.state.as_ref() {
            ::steam_vent_proto_common::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGamescope_GetState_Response {
        CGamescope_GetState_Response::new()
    }

    fn clear(&mut self) {
        self.state.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGamescope_GetState_Response {
        static instance: CGamescope_GetState_Response = CGamescope_GetState_Response {
            state: ::steam_vent_proto_common::protobuf::MessageField::none(),
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGamescope_StateChanged_Notification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGamescope_StateChanged_Notification {
    // special fields
    // @@protoc_insertion_point(special_field:CGamescope_StateChanged_Notification.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGamescope_StateChanged_Notification {
    fn default() -> &'a CGamescope_StateChanged_Notification {
        <CGamescope_StateChanged_Notification as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGamescope_StateChanged_Notification {
    pub fn new() -> CGamescope_StateChanged_Notification {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGamescope_StateChanged_Notification {
    const NAME: &'static str = "CGamescope_StateChanged_Notification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGamescope_StateChanged_Notification {
        CGamescope_StateChanged_Notification::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGamescope_StateChanged_Notification {
        static instance: CGamescope_StateChanged_Notification = CGamescope_StateChanged_Notification {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGamescope_SetBlurParams_Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGamescope_SetBlurParams_Request {
    // message fields
    // @@protoc_insertion_point(field:CGamescope_SetBlurParams_Request.mode)
    pub mode: ::std::option::Option<::steam_vent_proto_common::protobuf::EnumOrUnknown<super::enums::EGamescopeBlurMode>>,
    // @@protoc_insertion_point(field:CGamescope_SetBlurParams_Request.radius)
    pub radius: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:CGamescope_SetBlurParams_Request.fade_duration_ms)
    pub fade_duration_ms: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:CGamescope_SetBlurParams_Request.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGamescope_SetBlurParams_Request {
    fn default() -> &'a CGamescope_SetBlurParams_Request {
        <CGamescope_SetBlurParams_Request as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGamescope_SetBlurParams_Request {
    pub fn new() -> CGamescope_SetBlurParams_Request {
        ::std::default::Default::default()
    }

    // optional .EGamescopeBlurMode mode = 1;

    pub fn mode(&self) -> super::enums::EGamescopeBlurMode {
        match self.mode {
            Some(e) => e.enum_value_or(super::enums::EGamescopeBlurMode::k_EGamescopeBlurMode_Disabled),
            None => super::enums::EGamescopeBlurMode::k_EGamescopeBlurMode_Disabled,
        }
    }

    pub fn clear_mode(&mut self) {
        self.mode = ::std::option::Option::None;
    }

    pub fn has_mode(&self) -> bool {
        self.mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: super::enums::EGamescopeBlurMode) {
        self.mode = ::std::option::Option::Some(::steam_vent_proto_common::protobuf::EnumOrUnknown::new(v));
    }

    // optional int32 radius = 2;

    pub fn radius(&self) -> i32 {
        self.radius.unwrap_or(0)
    }

    pub fn clear_radius(&mut self) {
        self.radius = ::std::option::Option::None;
    }

    pub fn has_radius(&self) -> bool {
        self.radius.is_some()
    }

    // Param is passed by value, moved
    pub fn set_radius(&mut self, v: i32) {
        self.radius = ::std::option::Option::Some(v);
    }

    // optional int32 fade_duration_ms = 3;

    pub fn fade_duration_ms(&self) -> i32 {
        self.fade_duration_ms.unwrap_or(0)
    }

    pub fn clear_fade_duration_ms(&mut self) {
        self.fade_duration_ms = ::std::option::Option::None;
    }

    pub fn has_fade_duration_ms(&self) -> bool {
        self.fade_duration_ms.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fade_duration_ms(&mut self, v: i32) {
        self.fade_duration_ms = ::std::option::Option::Some(v);
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGamescope_SetBlurParams_Request {
    const NAME: &'static str = "CGamescope_SetBlurParams_Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.mode = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.radius = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.fade_duration_ms = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.mode {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.radius {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.fade_duration_ms {
            my_size += ::steam_vent_proto_common::protobuf::rt::int32_size(3, v);
        }
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        if let Some(v) = self.mode {
            os.write_enum(1, ::steam_vent_proto_common::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.radius {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.fade_duration_ms {
            os.write_int32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGamescope_SetBlurParams_Request {
        CGamescope_SetBlurParams_Request::new()
    }

    fn clear(&mut self) {
        self.mode = ::std::option::Option::None;
        self.radius = ::std::option::Option::None;
        self.fade_duration_ms = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGamescope_SetBlurParams_Request {
        static instance: CGamescope_SetBlurParams_Request = CGamescope_SetBlurParams_Request {
            mode: ::std::option::Option::None,
            radius: ::std::option::Option::None,
            fade_duration_ms: ::std::option::Option::None,
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:CGamescope_SetBlurParams_Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CGamescope_SetBlurParams_Response {
    // special fields
    // @@protoc_insertion_point(special_field:CGamescope_SetBlurParams_Response.special_fields)
    pub special_fields: ::steam_vent_proto_common::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CGamescope_SetBlurParams_Response {
    fn default() -> &'a CGamescope_SetBlurParams_Response {
        <CGamescope_SetBlurParams_Response as ::steam_vent_proto_common::protobuf::Message>::default_instance()
    }
}

impl CGamescope_SetBlurParams_Response {
    pub fn new() -> CGamescope_SetBlurParams_Response {
        ::std::default::Default::default()
    }
}

impl ::steam_vent_proto_common::protobuf::Message for CGamescope_SetBlurParams_Response {
    const NAME: &'static str = "CGamescope_SetBlurParams_Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::steam_vent_proto_common::protobuf::CodedInputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::steam_vent_proto_common::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::steam_vent_proto_common::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::steam_vent_proto_common::protobuf::CodedOutputStream<'_>) -> ::steam_vent_proto_common::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::steam_vent_proto_common::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::steam_vent_proto_common::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CGamescope_SetBlurParams_Response {
        CGamescope_SetBlurParams_Response::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CGamescope_SetBlurParams_Response {
        static instance: CGamescope_SetBlurParams_Response = CGamescope_SetBlurParams_Response {
            special_fields: ::steam_vent_proto_common::protobuf::SpecialFields::new(),
        };
        &instance
    }
}


const _VENT_PROTO_VERSION_CHECK: () = ::steam_vent_proto_common::VERSION_0_5_0;

#[allow(unused_imports)]
use crate::enums::*;
#[allow(unused_imports)]
use crate::steammessages_base::*;
#[allow(unused_imports)]
use crate::webuimessages_base::*;
impl ::steam_vent_proto_common::RpcMessage for CMsgDisplayInfo {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CMsgGamescopeState {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGamescope_GetState_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGamescope_GetState_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGamescope_StateChanged_Notification {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGamescope_SetBlurParams_Request {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
impl ::steam_vent_proto_common::RpcMessage for CGamescope_SetBlurParams_Response {
    fn parse(reader: &mut dyn std::io::Read) -> ::steam_vent_proto_common::protobuf::Result<Self> {
        <Self as ::steam_vent_proto_common::protobuf::Message>::parse_from_reader(reader)
    }
    fn write(&self, writer: &mut dyn std::io::Write) -> ::steam_vent_proto_common::protobuf::Result<()> {
        use ::steam_vent_proto_common::protobuf::Message;
        self.write_to_writer(writer)
    }
    fn encode_size(&self) -> usize {
        use ::steam_vent_proto_common::protobuf::Message;
        self.compute_size() as usize
    }
}
///
struct Gamescope {}
impl ::steam_vent_proto_common::RpcService for Gamescope {
    const SERVICE_NAME: &'static str = "Gamescope";
}
impl ::steam_vent_proto_common::RpcMethod for CGamescope_GetState_Request {
    const METHOD_NAME: &'static str = "Gamescope.GetState#1";
    type Response = CGamescope_GetState_Response;
}
impl ::steam_vent_proto_common::RpcMethod for CGamescope_SetBlurParams_Request {
    const METHOD_NAME: &'static str = "Gamescope.SetBlurParams#1";
    type Response = CGamescope_SetBlurParams_Response;
}
impl ::steam_vent_proto_common::RpcMethod for CGamescope_StateChanged_Notification {
    const METHOD_NAME: &'static str = "Gamescope.NotifyStateChanged#1";
    type Response = WebUINoResponse;
}
